[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14"},{"size":500,"mtime":1607403407622,"results":"15","hashOfConfig":"16"},{"size":1544,"mtime":1612597994082,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1607403407623,"results":"18","hashOfConfig":"16"},{"size":861,"mtime":1612426425775,"results":"19","hashOfConfig":"16"},{"size":97,"mtime":1607733049448,"results":"20","hashOfConfig":"16"},{"size":238,"mtime":1607726052220,"results":"21","hashOfConfig":"16"},{"size":8975,"mtime":1612233906671,"results":"22","hashOfConfig":"16"},{"size":234,"mtime":1612233939058,"results":"23","hashOfConfig":"16"},{"size":684,"mtime":1612233978520,"results":"24","hashOfConfig":"16"},{"size":965,"mtime":1612233987275,"results":"25","hashOfConfig":"16"},{"size":7204,"mtime":1612236691840,"results":"26","hashOfConfig":"16"},{"size":7052,"mtime":1612597984888,"results":"27","hashOfConfig":"16"},{"size":2453,"mtime":1612679889327,"results":"28","hashOfConfig":"16"},{"size":16732,"mtime":1612596971144,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"sahw5t",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["62","63"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["64","65"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["66"],"import React, { useState, useEffect, useContext } from 'react';\nimport { prettifyDate } from '../utils';\nimport Loading from './Loading';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard'\n\nconst StudentContext = React.createContext();\nconst HomeworkContext = React.createContext();\n\nfunction Student(props) {\n    const [view, setView] = useState('home');\n    const [student, setStudent] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const fetchStudentData = () => {\n        fetch('/auth')\n            .then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                setStudent(body.student);\n                setIsLoaded(true);\n            });\n    }\n    useEffect(() => {\n        fetchStudentData();\n    }, []);\n    if (!isLoaded) return (\n        <Dashboard>\n            <Loading />\n        </Dashboard>\n    )\n    return (\n        <StudentContext.Provider value={fetchStudentData}>\n            <Dashboard teacher={false}>\n                <Header>\n                    {student.firstName}\n                </Header>\n                <Sidebar>\n                    <div className=\"StudentSidebar\">\n                        <div className=\"avatarContainer\">\n                            <img alt=\"student avatar\" className=\"studentAvatar\" src=\"https://lh3.googleusercontent.com/ImpxcbOUkhCIrWcHgHIDHmmvuFznNSGn2y1mor_hLqpYjI6Q1J7XAVvpR-I24ZOJL3s\" />\n                        </div>\n                        <div className=\"studentCoins\">\n                            <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n                            <span className=\"coinsCount\">{student.coins.toString()}</span>\n                        </div>\n                    </div>\n                </Sidebar>\n                <Main view={view} student={student} />\n                <Nav>\n                    <button className=\"stealth link\" onClick={() => setView('home')}>Homework</button>\n                    <button className=\"stealth link\" onClick={() => setView('marketplace')}>Marketplace</button>\n                    <button className=\"stealth link\" onClick={() => setView('badges')}>Badges</button>\n                    <button className=\"stealth link\" onClick={props.logout}>Log out</button>\n                </Nav>\n            </Dashboard>\n        </StudentContext.Provider>\n    )\n}\n\nfunction Main(props) {\n    const { view, student } = props;\n    switch (view) {\n        case 'home': return <Home student={student} />;\n        default: return <Home student={student} />;\n    }\n}\n\nfunction Home(props) {\n    return (\n        <div className=\"Main\">\n            <ViewHomework student={props.student} />\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { student } = props;\n    const [homework, updateHomework] = useState(null);\n    const fetchHomework = () => {\n        fetch('/get/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ studentId: student._id })\n        }).then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                updateHomework(body.homework);\n            });\n    }\n    useEffect(fetchHomework, []);\n    const viewHomework = () => {\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...homework[i]} />);\n        }\n        return homeworkModules;\n    }\n    return (\n        <HomeworkContext.Provider value={fetchHomework}>\n            <div className=\"ViewHomework\">\n                {homework ? viewHomework() : '...'}\n            </div>\n        </HomeworkContext.Provider>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        const assignmentsArray = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsArray.push(<Assignment homeworkId={_id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsArray;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { homeworkId } = props;\n    const fetchHomework = useContext(HomeworkContext);\n    const updateHomeworkProgress = (value) => {\n        fetch('/update/progress', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ _id: homeworkId, index: props.index, value })\n        }).then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                fetchHomework();\n                // refresh hw data\n            });\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <button onClick={props.progress === 0 ? () => {} : () => updateHomeworkProgress(props.progress - 1)}\n                    className={`stealth${props.progress === 0 ? ' disabled' : ''}`}\n                    style={{ visibility: props.recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                <ProgressBar percentage={(100 * props.progress) / 4} />\n                <button onClick={props.progress === 4 ? () => {} : () => updateHomeworkProgress(props.progress + 1)}\n                    className={`stealth${props.progress === 4 ? ' disabled' : ''}`}\n                    style={{ visibility: props.recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n                {/*(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span>{`${props.progress * 20}`}</span>\n                    </div>*/}\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: props.percentage+'%' }}></div>\n        </div>\n    )\n}\n\nexport default Student;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["67"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["68"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["69"],"import { useState, useEffect, useRef } from 'react';\nimport Loading from './Loading';\nimport { prettifyDate } from '../utils';\nimport dayjs from 'dayjs';\nimport MiniMenu from './MiniMenu';\n\nexport default function ViewStudent(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const state = { homework }\n    const getHomework = async () => {\n        const response = await fetch('/get/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ studentId: student._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n        setIsLoaded(true);\n    }\n    useEffect(() => {\n        setIsLoaded(false);\n        getHomework();\n    }, [student._id]);\n    const addNewHomework = () => {\n        let content = (\n            <div className=\"modalBox\">\n                <h2>{`Add homework for ${student.firstName}`}</h2>\n                <AddHomeworkForm {...props} {...state} />\n            </div>\n        )\n        props.updateModal(content);\n    }\n    if (!student) return;\n    if (!isLoaded) return <Loading />;\n    return (\n        <div className=\"Main\">\n            <div className=\"ViewStudent\">\n                <div className=\"viewStudentHeader\">\n                    <h1>{student.firstName}'s Homework Progress</h1>\n                    <button className=\"stealth\" onClick={addNewHomework}><i className=\"fas fa-plus-circle\"></i></button>\n                </div>\n                <div className=\"viewStudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <img alt=\"student avatar\" className=\"studentAvatar\" src=\"https://lh3.googleusercontent.com/ImpxcbOUkhCIrWcHgHIDHmmvuFznNSGn2y1mor_hLqpYjI6Q1J7XAVvpR-I24ZOJL3s\" />\n                    </div>\n                    <StudentCoins student={student} />\n                </div>\n                <div className=\"viewStudentHomework\">\n                    <ViewHomework {...props} {...state} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction StudentCoins(props) {\n    const { student } = props;\n    const [coinsCount, updateCoinsCount] = useState(student.coins);\n    const [makingChanges, updateMakingChanges] = useState(false);\n    useEffect(() => {\n        updateMakingChanges(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [student._id]);\n    useEffect(() => {\n        updateCoinsCount(student.coins);\n    }, [student.coins]);\n    const handleUpdateCoins = async () => {\n        const response = await fetch('/update/coins', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                studentId: student._id,\n                coins: coinsCount\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success=true message from server');\n        updateMakingChanges(false);\n        props.refreshData();\n    }\n    const editCoinsButtons = () => {\n        return (\n            <div>\n                <button className=\"stealth link\" onClick={() => addCoins(-10)}><i className=\"fas fa-minus-circle\"></i></button>\n                <button className=\"stealth link\" onClick={() => addCoins(10)}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        )\n    }\n    const addCoins = (amount) => {\n        updateCoinsCount(coinsCount + amount);\n    }\n    return (\n        <div className=\"StudentCoins\">\n            <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n            <span className=\"coinsCount\">{coinsCount.toString()}</span>\n            <div className=\"editCoinsButton\">\n                {makingChanges ? editCoinsButtons() : <button className=\"stealth link\" onClick={() => updateMakingChanges(true)}>Edit</button>}\n            </div>\n            {makingChanges && <div className=\"confirmChangesButton\">\n                <button className=\"secondary\" onClick={() => handleUpdateCoins(student._id)}>Save</button>\n                <button className=\"secondary greyed\" onClick={() => {\n                    updateMakingChanges(false);\n                    updateCoinsCount(student.coins);\n                }}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { student, homework } = props;\n    const viewHomework = () => {\n        if (!homework.length) return 'No homework exists for this student';\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...props} key={homework[i]._id} student={student} {...homework[i]} refetchStudentData={props.refetchStudentData} refetchHomeworkData={props.refetchHomeworkData} />)\n        }\n        return homeworkModules;\n    }\n    return (\n        <div className=\"ViewHomework\">\n            {viewHomework()}\n        </div>\n    )\n}\n\nfunction Homework(props) {\n    const { student, _id, date, headline, assignments } = props;\n    const [showingMenu, updateShowingMenu] = useState(false);\n    const toggleMenu = () => {\n        updateShowingMenu(prevState => !prevState);\n    }\n    const showMenu = () => {\n        return (\n            <MiniMenu exit={() => updateShowingMenu(false)}>\n                <button className=\"stealth link edit\" onClick={launchEditHomework}>Edit</button>\n                <button className=\"stealth link delete\" onClick={confirmDeletion}>Delete</button>\n            </MiniMenu>\n        );\n    }\n    const launchEditHomework = () => {\n        updateShowingMenu(false);\n        props.updateModal(<EditHomeworkForm {...props} />);\n    }\n    const confirmDeletion = () => {\n        updateShowingMenu(false);\n        let content = (\n            <div className=\"modalBox\">\n                <h2>Are you sure you want to proceed?</h2>\n                This cannot be undone.\n                <div className=\"buttons\">\n                    <button onClick={handleDeleteHomework}>Yes, I'm sure</button>\n                    <button className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                </div>\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const handleDeleteHomework = async () => {\n        const response = await fetch('/delete/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refetchHomeworkData();\n    }\n    const homeworkAssignments = () => {\n        const assignmentsList = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsList.push(<Assignment student={student} homeworkId={_id} refetchStudentData={props.refetchStudentData} refetchHomeworkData={props.refetchHomeworkData} key={assignments[i]._id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsList;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n                <div className=\"options\">\n                    <button className=\"stealth\" onClick={toggleMenu}><i className=\"fas fa-bars\"></i></button>\n                    {showingMenu && showMenu()}\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { student, homeworkId } = props;\n    const coinsNumber = useRef(null);\n    const addCoins = async (index, recorded = true) => {\n        if (props.recorded) return;\n        const response = await fetch('/update/recorded', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: homeworkId, index, recorded })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        const updateCoins = async () => {\n            let coinsCount = parseInt(coinsNumber.current.innerHTML);\n            coinsCount += student.coins;\n            const response = await fetch('/update/coins', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    studentId: student._id,\n                    coins: coinsCount\n                })\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no { success: true } message from server');\n            console.log('success!!!!!');\n            props.refetchStudentData(student._id);\n            props.refetchHomeworkData();\n        }\n        updateCoins();\n    }\n    const updateHomeworkProgress = async (index, value) => {\n        const response = await fetch('/update/progress', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: homeworkId, index, value })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refetchHomeworkData();\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <input type=\"range\"\n                    min=\"0\" max=\"4\"\n                    defaultValue={props.progress.toString()}\n                    onChange={(e) => updateHomeworkProgress(props.index, e.target.value)}\n                    disabled={props.recorded ? true : false} />\n                {(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`} onClick={() => addCoins(props.index)}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span ref={coinsNumber}>{`${props.progress * 20}`}</span>\n                    </div>}\n            </div>\n        </li>\n    )\n}\n\nfunction AddHomeworkForm(props) {\n    const [formData, updateFormData] = useState({\n        studentId: props.student._id,\n        date: dayjs().format('YYYY-MM-DD'),\n        headline: '',\n        assignments: [{}, {}, {}, {}]\n    });\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch('/add/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshData();\n        props.updateModal(false);\n    }\n    const handleAddAssignment = (index, label) => {\n        let { assignments } = formData;\n        let item = assignments[index];\n        item = { label: label, progress: 0 }\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    const today = () => {\n        return dayjs().format('YYYY-MM-DD');\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={today()} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" onChange={(e) => handleAddAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" onChange={(e) => handleAddAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" onChange={(e) => handleAddAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" onChange={(e) => handleAddAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}\n\nfunction EditHomeworkForm(props) {\n    const { _id, date, headline, assignments } = props;\n    const [formData, updateFormData] = useState({ _id, date, headline, assignments });\n    const handleEditHomework = async (e) => {\n        e.preventDefault();\n        const response = await fetch('/edit/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.closeModal();\n        props.refetchHomeworkData();\n    }\n    const handleEditAssignment = (index, label) => {\n        let item = assignments[index];\n        item.label = label;\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    console.log(date);\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleEditHomework} autoComplete=\"off\">\n            <h2>Edit homework for {prettifyDate(date)}</h2>\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={date.split('T')[0]} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" defaultValue={headline} onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" defaultValue={assignments[0].label} onChange={(e) => handleEditAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" defaultValue={assignments[1].label} onChange={(e) => handleEditAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" defaultValue={assignments[2].label} onChange={(e) => handleEditAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" defaultValue={assignments[3].label} onChange={(e) => handleEditAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}",{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"70","replacedBy":"74"},{"ruleId":"72","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":93,"column":30,"nodeType":"78","endLine":93,"endColumn":32,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":41,"column":8,"nodeType":"78","endLine":41,"endColumn":40,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":27,"column":25,"nodeType":"84","endLine":27,"endColumn":99},{"ruleId":"76","severity":1,"message":"85","line":29,"column":8,"nodeType":"78","endLine":29,"endColumn":21,"suggestions":"86"},"no-native-reassign",["87"],"no-negated-in-lhs",["88"],["87"],["88"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'student._id'. Either include it or remove the dependency array.","ArrayExpression",["89"],"React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["91"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},{"desc":"96","fix":"97"},"Update the dependencies array to be: [student._id]",{"range":"98","text":"99"},"Update the dependencies array to be: [teacher._id, shouldRefreshData, getTeacherData]",{"range":"100","text":"101"},"Update the dependencies array to be: [getHomework, student._id]",{"range":"102","text":"103"},[3572,3574],"[student._id]",[1445,1477],"[teacher._id, shouldRefreshData, getTeacherData]",[1036,1049],"[getHomework, student._id]"]