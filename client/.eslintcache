[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19"},{"size":500,"mtime":1607403407622,"results":"20","hashOfConfig":"21"},{"size":2537,"mtime":1613367726579,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1607403407623,"results":"23","hashOfConfig":"21"},{"size":917,"mtime":1613115514815,"results":"24","hashOfConfig":"21"},{"size":97,"mtime":1607733049448,"results":"25","hashOfConfig":"21"},{"size":617,"mtime":1613104797140,"results":"26","hashOfConfig":"21"},{"size":9062,"mtime":1613201973790,"results":"27","hashOfConfig":"21"},{"size":234,"mtime":1612233939058,"results":"28","hashOfConfig":"21"},{"size":684,"mtime":1612233978520,"results":"29","hashOfConfig":"21"},{"size":965,"mtime":1612233987275,"results":"30","hashOfConfig":"21"},{"size":10382,"mtime":1613431401853,"results":"31","hashOfConfig":"21"},{"size":12668,"mtime":1613295676294,"results":"32","hashOfConfig":"21"},{"size":16130,"mtime":1613461172122,"results":"33","hashOfConfig":"21"},{"size":16744,"mtime":1612850070861,"results":"34","hashOfConfig":"21"},{"size":714,"mtime":1613117759718,"results":"35","hashOfConfig":"21"},{"size":4622,"mtime":1613290340974,"results":"36","hashOfConfig":"21"},{"size":714,"mtime":1613378750044,"results":"37","hashOfConfig":"21"},{"size":2768,"mtime":1613431931954,"results":"38","hashOfConfig":"21"},{"size":436,"mtime":1613431351884,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"sahw5t",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["86","87"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["88","89"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["90","91"],"import { useState, useEffect } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport Closet from './Closet';\nimport Avatar from './Avatar';\nimport Marketplace from './Marketplace';\nimport ContextMenu from './ContextMenu';\nimport { prettifyDate } from '../utils';\nimport Button from './Button';\n\nexport default function Student(props) {\n    const { student, wearables } = props;\n    const [view, setView] = useState('home');\n    const [avatar, setAvatar] = useState(null);\n    useEffect(() => {\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, src } = wearables[index];\n            obj[category] = { _id, src };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student.avatar, view]);\n    const closet = student.closet.map(_id => { // converting student.closet, which is an array of string IDs, to an array of objects\n        const index = wearables.findIndex(element => element._id === _id);\n        const thisWearable = wearables[index];\n        return thisWearable;\n    });\n    const state = {\n        view,\n        avatar,\n        closet,\n        updateView: setView,\n        updateAvatar: setAvatar\n    }\n    return (\n        <Dashboard teacher={false}>\n            <StudentProfileDropdown {...props} {...state} />\n            <Sidebar>\n                <div className=\"StudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} {...state} />\n                    </div>\n                    <div className=\"studentCoins\">\n                        <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n                        <span className=\"coinsCount\">{student.coins.toString()}</span>\n                    </div>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n            <Nav>\n                <button className=\"stealth link\" onClick={() => setView('home')}>Homework</button>\n                <button className=\"stealth link\" onClick={() => setView('closet')}>Closet</button>\n                <button className=\"stealth link\" onClick={() => setView('marketplace')}>Marketplace</button>\n                <button className=\"stealth link\" onClick={() => setView('badges')}>Badges</button>\n            </Nav>\n        </Dashboard>\n    );\n}\n\nfunction StudentProfileDropdown(props) {\n    const { student } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <Header className={expanded ? 'expanded' : ''}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{student.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={student.profilePic ? student.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              content={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView({ type: 'account' })}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView({ type: 'settings' })}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </Header>\n    )\n}\n\nfunction Main(props) {\n    const { view } = props;\n    switch (view) {\n        case 'home': return <Homework {...props} />;\n        case 'closet': return <StudentCloset {...props} />\n        case 'marketplace': return <StudentMarketplace {...props} />;\n        case 'badges': return <StudentBadges {...props} />;\n        default: return <Homework {...props} />;\n    }\n}\n\nfunction Homework(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState(null);\n    const getHomework = async () => {\n        const response = await fetch('/get/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ studentId: student._id })\n        })\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n    }\n    useEffect(() => {\n        getHomework();\n    }, []);\n    const generateHomeworkModules = () => {\n        return homework.map(homework => (\n            <HomeworkModule key={`homeworkModule-${homework._id}`} {...props} {...homework} refreshHomework={getHomework} />\n        ));\n    };\n    return (\n        <div className=\"Main\">\n            <h1>My Homework Tracker</h1>\n            <div className=\"ViewHomework\">\n                {homework ? generateHomeworkModules() : '...'}\n            </div>\n        </div>\n    );\n}\n\nfunction HomeworkModule(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        return assignments.map((info, index) => (\n            <Assignment key={`homeworkAssignment-${_id}-${index}`} {...props} index={index} {...info} _id={_id} />\n        ));\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nfunction Assignment(props) {\n    const { _id, index, label, progress, recorded } = props;\n    const updateHomeworkProgress = async (value) => {\n        // todo don't wait for server response to visually update UI!!!\n        const response = await fetch('/update/progress', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ _id, index, value })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{label}</div>\n            <div className=\"progress\">\n                <button onClick={progress === 0 ? () => {} : () => updateHomeworkProgress(progress - 1)}\n                    className={`stealth${progress === 0 ? ' disabled' : ''}`}\n                    style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                <ProgressBar percentage={(100 * progress) / 4} />\n                <button onClick={progress === 4 ? () => {} : () => updateHomeworkProgress(progress + 1)}\n                    className={`stealth${progress === 4 ? ' disabled' : ''}`}\n                    style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    const { percentage } = props;\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: percentage + '%' }}></div>\n        </div>\n    )\n}\n\nfunction StudentMarketplace(props) {\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentMarketplace\">\n                <h1>Marketplace</h1>\n                <Marketplace {...props} />\n            </div>\n        </div>\n    );\n}\n\nfunction StudentCloset(props) {\n    const { student, avatar } = props;\n    const handleUpdateAvatar = async () => {\n        const updatedAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const response = await fetch('/update/avatar', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                _id: student._id,\n                avatar: updatedAvatar\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshData();\n    }\n    const unsavedChanges = () => {\n        // there has got to be a better way todo this\n        const previewAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const trueAvatar = student.avatar;\n        if (trueAvatar.length !== previewAvatar.length) return true;\n        const trueAvatarObject = {};\n        const previewAvatarObject = {};\n        for (let id of trueAvatar) trueAvatarObject[id] = true;\n        for (let id of previewAvatar) previewAvatarObject[id] = true;\n        // checking if the two arrays have equal contents (regardless of order)\n        if ((previewAvatar.every(string => trueAvatarObject[string]))\n        && (trueAvatar.every(string => previewAvatarObject[string]))) {\n            return false;\n        }\n        else return true;\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Closet</h1>\n            <Closet {...props} />\n            {unsavedChanges() && <div className=\"buttons\"><Button onClick={handleUpdateAvatar} className=\"slideUpIn\">Save Changes</Button></div>}\n        </div>\n    );\n}\n\nfunction StudentBadges(props) {\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentBadges\">\n                <h1>My Badges</h1>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["92","93"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar } from './Dashboard';\nimport ViewStudent from './ViewStudent';\nimport Marketplace, { AddOrEditWearable } from './Marketplace';\nimport Loading from './Loading';\nimport ContextMenu from './ContextMenu';\nimport { getArrayIndexByKeyValue, shrinkit } from '../utils';\nimport Dropdown from './Dropdown';\n\nexport default function Teacher(props) {\n    const { teacher } = props;\n    const [view, setView] = useState({ type: 'home' });\n    const [students, setStudents] = useState([]);\n    const [wearables, setWearables] = useState([]);\n    const [badges, setBadges] = useState([]);\n    const getTeacherData = async () => {\n        const response = await fetch('/teacher/data', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: teacher._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        setStudents(body.students);\n        setWearables(body.wearables);\n        setBadges(body.badges);\n        if (view.type === 'student') {\n            const refreshCurrentStudent = (prevView) => {\n                let thisStudent = prevView.data;\n                let index = getArrayIndexByKeyValue('_id', thisStudent._id, body.students);\n                return body.students[index];\n            }\n            setView(prevView => ({\n                type: 'student',\n                data: refreshCurrentStudent(prevView)\n            }));\n        }\n    }\n    useEffect(() => {\n        getTeacherData();\n    }, [teacher._id]);\n    const generateStudentList = () => {\n        if (!students.length) return 'No students yet!';\n        const makeSureNameFits = (string) => {\n            if (string.length < 18) return string;\n            let shortenedString = string.substring(0, 17);\n            return shortenedString + '...';\n        }\n        const studentList = students.map(student => ({\n            value: student._id,\n            display: makeSureNameFits(student.firstName + ' ' + student.lastName)\n        }));\n        return (\n            <Dropdown\n                minWidth=\"12rem\"\n                restoreDefault={view.type !== 'student'}\n                defaultValue={{ value: null, display: 'Select one...' }}\n                listItems={studentList}\n                onChange={(_id) => setView({ type: 'student', data: students[students.findIndex(student => student._id === _id)] })}\n            />\n        );\n    }\n    const state = {\n        view,\n        students,\n        wearables,\n        badges,\n        updateView: setView,\n        refreshData: getTeacherData\n    }\n    return (\n        <Dashboard teacher={true}>\n            <TeacherProfileDropdown {...props} {...state} />\n            <Sidebar>\n                <h2>Students</h2>\n                {generateStudentList()}\n                <hr />\n                <h2>Control Panel</h2>\n                <ul className=\"stealth\">\n                    <li><button onClick={() => setView({ type: 'marketplace' })} className=\"stealth link\">Marketplace</button></li>\n                    <li><button onClick={() => setView({ type: 'badges' })} className=\"stealth link\">Badges</button></li>\n                </ul>\n                <hr />\n                <div className=\"teacherCode\">\n                    Teacher code:<br />\n                    <b style={{ fontSize: '0.8rem' }}>{teacher._id}</b>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction TeacherProfileDropdown(props) {\n    const { teacher } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <Header className={expanded ? 'expanded' : ''}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{teacher.username}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={teacher.profilePic ? teacher.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              content={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView({ type: 'account' })}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView({ type: 'settings' })}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </Header>\n    )\n}\n\nfunction Main(props) {\n    const { view } = props;\n    switch (view.type) {\n        case 'home': return <Home {...props} />;\n        case 'student': return <ViewStudent {...props} student={view.data} />;\n        case 'marketplace': return <TeacherMarketplace {...props} />;\n        case 'badges': return <TeacherBadges {...props} />;\n        case 'account': return <MyAccount {...props} />;\n        case 'settings': return <Settings {...props} />;\n        default: return <Home {...props} />;\n    }\n}\n\nfunction Home() {\n    return (\n        <div className=\"Main padme\">\n            <h1>Dashboard</h1>\n            <ul>\n                <li>View student dashboard</li>\n                <ul>\n                    <li>Add homework</li>\n                    <li>Log assignment progress</li>\n                    <li>Give coins</li>\n                    <li>Award badges</li>\n                </ul>\n                <li>General - apply to all students</li>\n                <ul>\n                    <li>Add/edit/delete badges</li>\n                    <li>Add/edit/delete closet items</li>\n                </ul>\n            </ul>\n        </div>\n    );\n}\n\nfunction TeacherMarketplace(props) {\n    const { teacher, modal } = props;\n    const [wearableModal, setWearableModal] = useState(false);\n    useEffect(() => {\n        if (!modal) setWearableModal(false);\n    }, [modal]);\n    useEffect(() => {\n        if (wearableModal) addNewWearable();\n    }, [teacher]);\n    const addNewWearable = () => {\n        props.updateModal(<AddOrEditWearable {...props} />);\n        setWearableModal(true);\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Marketplace</h1>\n            <Marketplace {...props} viewingAsTeacher={true} />\n            <button onClick={addNewWearable}>Add new wearable</button>\n        </div>\n    );\n}\n\nfunction TeacherBadges(props) {\n    const addNewBadge = () => {\n        props.updateModal(<AddOrEditBadge {...props} />)\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Badges</h1>\n            <Badges {...props} />\n            <button onClick={addNewBadge}>Add new badge</button>\n        </div>\n    )\n}\n\nfunction Badges(props) {\n    const { badges } = props;\n    const badgesRef = useRef({});\n    const editOrDeleteBadge = (e, _id) => {\n        e.preventDefault();\n        const index = badges.findIndex(badge => badge._id === _id);\n        const thisBadge = badges[index];\n        const editBadge = () => props.updateModal(<AddOrEditBadge {...props} badge={badges[index]} />);\n        const deleteBadge = () => {\n            const handleDelete = async () => {\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch('/delete/badge', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ _id })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                shrinkit(badgesRef.current[_id], true);\n                props.refreshTeacher();\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Are you sure?</h2>\n                    <img alt={thisBadge.name} src={thisBadge.src} style={{ float: 'right' }} />\n                    Are you sure you want to delete the badge \"{thisBadge.name}\"? This action cannot be undone.\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ?   <Loading />\n                            :   <form onSubmit={handleDelete}>\n                                    <button type=\"submit\">Yes, I'm sure</button>\n                                    <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                </form>\n                            }\n                    </div>\n                </div>\n            )\n            props.updateModal(content());\n        }\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={editBadge}>Edit</button></li>\n                <li><button onClick={deleteBadge}>Delete</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const generateBadgeList = () => {\n        return badges.map(badge => (\n            <div\n              key={`badgeList-${badge._id}`}\n              ref={(el) => badgesRef.current[badge._id] = el}\n              className=\"badgeItem\">\n                <img alt={badge.name} src={badge.src} onContextMenu={(e) => editOrDeleteBadge(e, badge._id)} />\n                <span className=\"badgeName\">{badge.name}</span>\n                <span className=\"badgeValue\">{badge.value}</span>\n            </div>\n        ));\n    }\n    return (\n        <div className=\"BadgeList\">\n            {generateBadgeList()}\n        </div>\n    )\n}\n\nfunction AddOrEditBadge(props) {\n    const { teacher, badge } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        _id: badge ? badge._id : '',\n        teacherCode: badge ? badge.teacherCode : teacher._id,\n        name: badge ? badge.name : '',\n        src: badge ? badge.src : '',\n        value: badge ? badge.value : ''\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        const ROUTE = badge ? '/edit/badge' : '/add/badge';\n        const response = await fetch(ROUTE, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.updateModal(false);\n        props.refreshData();\n    }\n    return (\n        <div className=\"modalBox\">\n            <form className=\"pad\" onSubmit={handleSubmit}>\n                <h2>{badge ? 'Edit this' : 'Add new'} badge</h2>\n                <label htmlFor=\"name\">Badge name:</label>\n                <input type=\"text\" defaultValue={badge ? badge.name : ''} onChange={(e) => updateFormData('name', e.target.value)} />\n                <label htmlFor=\"src\">Image link:</label>\n                <input type=\"text\" defaultValue={badge ? badge.src : ''} onChange={(e) => updateFormData('src', e.target.value)} />\n                <label htmlFor=\"value\">Badge value:</label>\n                <input type=\"text\" defaultValue={badge ? badge.value : ''} onChange={(e) => updateFormData('value', e.target.value)} />\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction MyAccount(props) {\n    return (\n        <div className=\"Main\">\n            <h1>My Account</h1>\n        </div>\n    );\n}\n\nfunction Settings(props) {\n    return (\n        <div className=\"Main\">\n            <h1>Settings</h1>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["94"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["95"],"import { useState, useEffect, useRef } from 'react';\nimport Loading from './Loading';\nimport { prettifyDate } from '../utils';\nimport dayjs from 'dayjs';\nimport MiniMenu from './MiniMenu';\n\nexport default function ViewStudent(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const state = { homework }\n    const getHomework = async () => {\n        const response = await fetch('/get/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ studentId: student._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n        setIsLoaded(true);\n    }\n    useEffect(() => {\n        setIsLoaded(false);\n        getHomework();\n    }, [student._id]);\n    const addNewHomework = () => {\n        let content = (\n            <div className=\"modalBox\">\n                <h2>{`Add homework for ${student.firstName}`}</h2>\n                <AddHomeworkForm {...props} {...state} refreshHomework={getHomework} />\n            </div>\n        )\n        props.updateModal(content);\n    }\n    if (!student) return;\n    if (!isLoaded) return <Loading />;\n    return (\n        <div className=\"Main\">\n            <div className=\"ViewStudent\">\n                <div className=\"viewStudentHeader\">\n                    <h1>{student.firstName}'s Homework Progress</h1>\n                    <button className=\"stealth\" onClick={addNewHomework}><i className=\"fas fa-plus-circle\"></i></button>\n                </div>\n                <div className=\"viewStudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <img alt=\"student avatar\" className=\"studentAvatar\" src=\"https://lh3.googleusercontent.com/ImpxcbOUkhCIrWcHgHIDHmmvuFznNSGn2y1mor_hLqpYjI6Q1J7XAVvpR-I24ZOJL3s\" />\n                    </div>\n                    <StudentCoins {...props} />\n                </div>\n                <div className=\"viewStudentHomework\">\n                    <ViewHomework {...props} {...state} refreshHomework={getHomework} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction StudentCoins(props) {\n    const { student } = props;\n    const [coinsCount, updateCoinsCount] = useState(student.coins);\n    const [makingChanges, updateMakingChanges] = useState(false);\n    useEffect(() => {\n        updateMakingChanges(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [student._id]);\n    useEffect(() => {\n        updateCoinsCount(student.coins);\n    }, [student.coins]);\n    const handleUpdateCoins = async () => {\n        const response = await fetch('/update/coins', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                studentId: student._id,\n                coins: coinsCount\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success=true message from server');\n        updateMakingChanges(false);\n        props.refreshData();\n    }\n    const editCoinsButtons = () => {\n        return (\n            <div>\n                <button className=\"stealth link\" onClick={() => addCoins(-10)}><i className=\"fas fa-minus-circle\"></i></button>\n                <button className=\"stealth link\" onClick={() => addCoins(10)}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        )\n    }\n    const addCoins = (amount) => {\n        updateCoinsCount(coinsCount + amount);\n    }\n    return (\n        <div className=\"StudentCoins\">\n            <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n            <span className=\"coinsCount\">{coinsCount.toString()}</span>\n            <div className=\"editCoinsButton\">\n                {makingChanges ? editCoinsButtons() : <button className=\"stealth link\" onClick={() => updateMakingChanges(true)}>Edit</button>}\n            </div>\n            {makingChanges && <div className=\"confirmChangesButton\">\n                <button className=\"secondary\" onClick={() => handleUpdateCoins(student._id)}>Save</button>\n                <button className=\"secondary greyed\" onClick={() => {\n                    updateMakingChanges(false);\n                    updateCoinsCount(student.coins);\n                }}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { homework } = props;\n    const viewHomework = () => {\n        if (!homework.length) return 'No homework exists for this student';\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...props} key={homework[i]._id} {...homework[i]} />)\n        }\n        return homeworkModules;\n    }\n    return (\n        <div className=\"ViewHomework\">\n            {viewHomework()}\n        </div>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const [showingMenu, updateShowingMenu] = useState(false);\n    const toggleMenu = () => {\n        updateShowingMenu(prevState => !prevState);\n    }\n    const showMenu = () => {\n        return (\n            <MiniMenu exit={() => updateShowingMenu(false)}>\n                <button className=\"stealth link edit\" onClick={launchEditHomework}>Edit</button>\n                <button className=\"stealth link delete\" onClick={confirmDeletion}>Delete</button>\n            </MiniMenu>\n        );\n    }\n    const launchEditHomework = () => {\n        updateShowingMenu(false);\n        props.updateModal(<EditHomeworkForm {...props} />);\n    }\n    const confirmDeletion = () => {\n        updateShowingMenu(false);\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>Are you sure you want to proceed?</h2>\n                This cannot be undone.\n                {options.loadingIcon\n                    ?   <Loading />\n                    :   <div className=\"buttons\">\n                            <button onClick={handleDeleteHomework}>Yes, I'm sure</button>\n                            <button className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                        </div>\n                    }\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const handleDeleteHomework = async () => {\n        const response = await fetch('/delete/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const homeworkAssignments = () => {\n        const assignmentsList = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsList.push(<Assignment {...props} homeworkId={_id} key={assignments[i]._id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsList;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n                <div className=\"options\">\n                    <button className=\"stealth\" onClick={toggleMenu}><i className=\"fas fa-bars\"></i></button>\n                    {showingMenu && showMenu()}\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { student, homeworkId } = props;\n    const coinsNumber = useRef(null);\n    const addCoins = async (index, recorded = true) => {\n        if (props.recorded) return;\n        const response = await fetch('/update/recorded', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: homeworkId, index, recorded })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        const updateCoins = async () => {\n            let coinsCount = parseInt(coinsNumber.current.innerHTML);\n            coinsCount += student.coins;\n            const response = await fetch('/update/coins', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    studentId: student._id,\n                    coins: coinsCount\n                })\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no { success: true } message from server');\n            console.log('success!!!!!');\n            props.refreshData();\n            props.refreshHomework();\n        }\n        updateCoins();\n    }\n    const updateHomeworkProgress = async (index, value) => {\n        const response = await fetch('/update/progress', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: homeworkId, index, value })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <input type=\"range\"\n                    min=\"0\" max=\"4\"\n                    defaultValue={props.progress.toString()}\n                    onChange={(e) => updateHomeworkProgress(props.index, e.target.value)}\n                    disabled={props.recorded ? true : false} />\n                {(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`} onClick={() => addCoins(props.index)}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span ref={coinsNumber}>{`${props.progress * 20}`}</span>\n                    </div>}\n            </div>\n        </li>\n    )\n}\n\nfunction AddHomeworkForm(props) {\n    const [formData, updateFormData] = useState({\n        studentId: props.student._id,\n        date: dayjs().format('YYYY-MM-DD'),\n        headline: '',\n        assignments: [{}, {}, {}, {}]\n    });\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch('/add/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshData();\n        props.refreshHomework();\n    }\n    const handleAddAssignment = (index, label) => {\n        let { assignments } = formData;\n        let item = assignments[index];\n        item = { label: label, progress: 0 }\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    const today = () => {\n        return dayjs().format('YYYY-MM-DD');\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={today()} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" onChange={(e) => handleAddAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" onChange={(e) => handleAddAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" onChange={(e) => handleAddAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" onChange={(e) => handleAddAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}\n\nfunction EditHomeworkForm(props) {\n    const { _id, date, headline, assignments } = props;\n    const [formData, updateFormData] = useState({ _id, date, headline, assignments });\n    const handleEditHomework = async (e) => {\n        e.preventDefault();\n        const response = await fetch('/edit/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const handleEditAssignment = (index, label) => {\n        let item = assignments[index];\n        item.label = label;\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    console.log(date);\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleEditHomework} autoComplete=\"off\">\n            <h2>Edit homework for {prettifyDate(date)}</h2>\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={date.split('T')[0]} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" defaultValue={headline} onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" defaultValue={assignments[0].label} onChange={(e) => handleEditAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" defaultValue={assignments[1].label} onChange={(e) => handleEditAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" defaultValue={assignments[2].label} onChange={(e) => handleEditAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" defaultValue={assignments[3].label} onChange={(e) => handleEditAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",["96"],"import { useEffect } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function ContextMenu(props) {\n    useEffect(() => {\n        const closeContextMenu = (e) => {\n            if (props.ignoreClick) {\n                for (let selector of props.ignoreClick) {\n                    if (elementHasParent(e.target, selector)) return;\n                }\n            }\n            props.updateContextMenu(false);\n        }\n        window.addEventListener('click', closeContextMenu);\n        return () => window.removeEventListener('click', closeContextMenu);\n    }, []);\n    return (\n        <div className=\"ContextMenu\" style={props.position}>\n            {props.content}\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["97","98"],"import { useEffect, useRef, useState } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function Dropdown(props) {\n    const { defaultValue, listItems, restoreDefault } = props;\n    const [display, setDisplay] = useState(() => {\n        if (!listItems || !listItems.length) return 'Add new...';\n        if (!defaultValue) return 'Select one';\n        return defaultValue.display;\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [addingNew, setAddingNew] = useState(false);\n    const dropdownList = useRef(null);\n    useEffect(() => {\n        const closeDropdown = (e) => {\n            if (elementHasParent(e.target, '.dropdownDisplay')) return;\n            if (elementHasParent(e.target, '.addNew')) return;\n            setIsOpen(false);\n        }\n        window.addEventListener('click', closeDropdown);\n        return () => window.removeEventListener('click', closeDropdown);\n    }, []);\n    useEffect(() => {\n        if (!dropdownList || !dropdownList.current) return;\n        if (isOpen) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px'; // plus 1px to account for 1px bottom border\n        else {\n            dropdownList.current.style.maxHeight = '0px';\n            setAddingNew(false); // unrelated to maxHeight adjustment thing\n        }\n    }, [isOpen]);\n    useEffect(() => {\n        if (addingNew) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px';\n    }, [addingNew]);\n    useEffect(() => {\n        if (restoreDefault) setDisplay(defaultValue.display);\n    }, [restoreDefault]);\n    const toggleIsOpen = () => setIsOpen(prevState => !prevState);\n    const handleClick = (e) => {\n        setDisplay(e.target.innerHTML);\n        props.onChange(e.target.getAttribute('data-value'));\n    }\n    const generateList = () => {\n        const buttonForAddNew =\n            <AddNew {...props}\n                addingNew={addingNew}\n                updateAddingNew={setAddingNew}\n                updateIsOpen={setIsOpen}\n                updateDisplay={setDisplay}\n            />;\n        if ((!listItems || !listItems.length) && props.addNew) {\n            console.table(listItems);\n            return buttonForAddNew;\n        }\n        const array = [];\n        for (let item of listItems) {\n            array.push(\n                <li className=\"dropdownItem\" key={`dropdownItem-${item.value}`}>\n                    <button type=\"button\" data-value={item.value} onClick={handleClick}>{item.display}</button>\n                </li>\n            );\n        }\n        if (props.addNew) array.push(buttonForAddNew);\n        return array;\n    }\n    return (\n        <div className={`Dropdown${isOpen ? ' expanded' : ''}`} style={{ minWidth: props.minWidth }}>\n            <div className=\"dropdownDisplay\" onClick={toggleIsOpen}>{display}</div>\n            <ul className=\"dropdownList\" ref={dropdownList}>{generateList()}</ul>\n        </div>\n    );\n}\n\nfunction AddNew(props) {\n    const { addingNew } = props;\n    const [inputValue, setInputValue] = useState(null);\n    const inputRef = useRef(null);\n    useEffect(() => {\n        if (!addingNew) return setInputValue(null);\n        inputRef.current.focus();\n        const handleKeydown = (e) => {\n            if (e.key === 'Escape') return props.updateAddingNew(false);\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                props.addNew(inputRef.current.value);\n                props.updateDisplay(inputRef.current.value);\n                props.onChange(inputRef.current.value);\n                props.updateIsOpen(false);\n                return;\n            }\n        }\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [addingNew]);\n    return (\n        <li className=\"dropdownItem\" key=\"dropdownItem-addNew\">\n            {addingNew\n                ?   <button type=\"button\" className=\"addNew active\">\n                        <input\n                            ref={inputRef}\n                            type=\"text\"\n                            defaultValue={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                        />\n                        <span className=\"inputHint\">Press Enter to submit, Esc to cancel.</span>\n                    </button>\n                :   <button type=\"button\" className=\"addNew\" onClick={() => props.updateAddingNew(true)}>\n                        {props.buttonContent || 'Add new...'}\n                    </button>\n                }\n        </li>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",["99","100"],"import { useState } from 'react';\n\nexport default function Closet(props) {\n    const { closet, avatar, teacher } = props;\n    const [category, setCategory] = useState(() => {\n        return teacher.wearableCategories.find(category => closet.some(wearable => wearable.category === category));\n    });\n    const generate = {\n        categoriesList: (closet) => {\n            return teacher.wearableCategories.map(category => {\n                const someClosetItemHasCategory = closet.some(wearable => wearable.category === category);\n                if (someClosetItemHasCategory) return (\n                    <button\n                      key={`closet-wearableCategories-${category}`}\n                      className=\"stealth\"\n                      onClick={() => setCategory(category)}>\n                          {category}\n                    </button>\n                )\n            });\n        },\n        wearablesList: (category) => {\n            const previewWearable = ({ category, _id, src }) => {\n                props.updateAvatar(prevState => {\n                    if (prevState[category] && prevState[category]._id === _id) {\n                        let prevStateMinusThisCategory = {...prevState};\n                        delete prevStateMinusThisCategory[category];\n                        return prevStateMinusThisCategory;\n                    }\n                    return ({\n                        ...prevState,\n                        [category]: { _id, src }\n                    });\n                });\n            }\n            return closet.map(wearable => {\n                const currentlyPreviewing = avatar[wearable.category] && avatar[wearable.category]._id === wearable._id;\n                if (wearable.category === category) return (\n                    <button\n                      key={`closetItem-${category}-${wearable._id}`}\n                      className={`stealth closetItem${currentlyPreviewing ? ' active' : ''}`} // if currently previewing, add light green background or something\n                      onClick={() => previewWearable(wearable)}>\n                        <img alt={wearable.name} src={wearable.src} />\n                        <span className=\"wearableName\">{wearable.name}</span>\n                    </button>\n                );\n            });\n        }\n    }\n    return (\n        <div className=\"Closet\">\n            <div id=\"demo\" onClick={() => console.table(props.avatar)}></div>\n            <div className=\"closetCategories\">\n                {generate.categoriesList(closet)}\n            </div>\n            <div className=\"closetWearables\">\n                <div className=\"wearablesGrid\">\n                    {generate.wearablesList(category)}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"101","replacedBy":"105"},{"ruleId":"103","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":23,"column":8,"nodeType":"109","endLine":23,"endColumn":30,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":118,"column":8,"nodeType":"109","endLine":118,"endColumn":10,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":44,"column":8,"nodeType":"109","endLine":44,"endColumn":21,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"115","line":168,"column":8,"nodeType":"109","endLine":168,"endColumn":17,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":207,"column":29,"nodeType":"119","endLine":207,"endColumn":124},{"ruleId":"107","severity":1,"message":"111","line":29,"column":8,"nodeType":"109","endLine":29,"endColumn":21,"suggestions":"120"},{"ruleId":"107","severity":1,"message":"121","line":16,"column":8,"nodeType":"109","endLine":16,"endColumn":10,"suggestions":"122"},{"ruleId":"107","severity":1,"message":"123","line":36,"column":8,"nodeType":"109","endLine":36,"endColumn":24,"suggestions":"124"},{"ruleId":"107","severity":1,"message":"121","line":93,"column":8,"nodeType":"109","endLine":93,"endColumn":19,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":10,"column":60,"nodeType":"128","messageId":"129","endLine":10,"endColumn":62},{"ruleId":"126","severity":1,"message":"127","line":36,"column":40,"nodeType":"128","messageId":"129","endLine":36,"endColumn":42},"no-native-reassign",["130"],"no-negated-in-lhs",["131"],["130"],["131"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wearables'. Either include it or remove the dependency array.","ArrayExpression",["132"],"React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["134"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["135"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["136"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["137"],"React Hook useEffect has a missing dependency: 'defaultValue.display'. Either include it or remove the dependency array.",["138"],["139"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"154","fix":"155"},"Update the dependencies array to be: [student.avatar, view, wearables]",{"range":"156","text":"157"},"Update the dependencies array to be: [getHomework]",{"range":"158","text":"159"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"160","text":"161"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"162","text":"163"},"Update the dependencies array to be: [getHomework, student._id]",{"range":"164","text":"165"},"Update the dependencies array to be: [props]",{"range":"166","text":"167"},"Update the dependencies array to be: [defaultValue.display, restoreDefault]",{"range":"168","text":"169"},"Update the dependencies array to be: [addingNew, props]",{"range":"170","text":"171"},[1026,1048],"[student.avatar, view, wearables]",[4969,4971],"[getHomework]",[1750,1763],"[getTeacherData, teacher._id]",[6419,6428],"[addNewWearable, teacher, wearableModal]",[1036,1049],"[getHomework, student._id]",[584,586],"[props]",[1586,1602],"[defaultValue.display, restoreDefault]",[3804,3815],"[addingNew, props]"]