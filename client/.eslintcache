[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js":"20"},{"size":500,"mtime":1607403407622,"results":"21","hashOfConfig":"22"},{"size":2611,"mtime":1614156154798,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1607403407623,"results":"24","hashOfConfig":"22"},{"size":1826,"mtime":1614160185854,"results":"25","hashOfConfig":"22"},{"size":97,"mtime":1607733049448,"results":"26","hashOfConfig":"27"},{"size":617,"mtime":1613104797140,"results":"28","hashOfConfig":"22"},{"size":8335,"mtime":1613697034845,"results":"29","hashOfConfig":"22"},{"size":410,"mtime":1613709289227,"results":"30","hashOfConfig":"22"},{"size":684,"mtime":1612233978520,"results":"31","hashOfConfig":"27"},{"size":965,"mtime":1612233987275,"results":"32","hashOfConfig":"22"},{"size":13195,"mtime":1614238683939,"results":"33","hashOfConfig":"22"},{"size":14957,"mtime":1614303254790,"results":"34","hashOfConfig":"22"},{"size":22685,"mtime":1614303487040,"results":"35","hashOfConfig":"22"},{"size":17432,"mtime":1614160220758,"results":"36","hashOfConfig":"22"},{"size":763,"mtime":1613722986777,"results":"37","hashOfConfig":"22"},{"size":4621,"mtime":1613791108724,"results":"38","hashOfConfig":"22"},{"size":1144,"mtime":1614054115657,"results":"39","hashOfConfig":"22"},{"size":2587,"mtime":1614302895202,"results":"40","hashOfConfig":"22"},{"size":1834,"mtime":1613715784896,"results":"41","hashOfConfig":"22"},{"size":6253,"mtime":1613975599081,"results":"42","hashOfConfig":"22"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"1e1hwtf",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"sahw5t",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"45"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"45"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"45"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"45"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"45"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["91","92"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["93","94"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",["95"],"import { ReactComponent as LoadingIcon } from './Loading.svg';\n\nfunction Loading(props) {\n    const { width, height } = props;\n    const style = new Object();\n    if (width) style.width = width + 'px';\n    if (height) style.height = height + 'px';\n    return (\n        <div className={`Loading${height ? ' mini' : ''}`} style={style}>\n            <LoadingIcon />\n        </div>\n    )\n}\n\nexport default Loading;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],["96","97"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["98","99","100"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport Closet from './Closet';\nimport Avatar from './Avatar';\nimport Marketplace from './Marketplace';\nimport ContextMenu from './ContextMenu';\nimport { prettifyDate } from '../utils';\nimport Button from './Button';\nimport MyAccount from './MyAccount';\n\nexport default function Student(props) {\n    const { student, wearables } = props;\n    const [view, setView] = useState('home');\n    const [avatar, setAvatar] = useState(null);\n    useEffect(() => {\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, name, src, image } = wearables[index];\n            obj[category] = { _id, name, src, image };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student.avatar, view]);\n    const closet = student.closet.map(_id => { // converting student.closet, which is an array of string IDs, to an array of objects\n        const index = wearables.findIndex(element => element._id === _id);\n        const thisWearable = wearables[index];\n        return thisWearable;\n    });\n    const formatCoins = (number) => number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    const state = {\n        view,\n        avatar,\n        closet,\n        updateView: setView,\n        updateAvatar: setAvatar\n    }\n    return (\n        <Dashboard teacher={false}>\n            <Header {...props} {...state}>\n                <Nav>\n                    <button className=\"stealth\" onClick={() => setView('home')}>Home</button>\n                    <button className=\"stealth\" onClick={() => setView('closet')}>Closet</button>\n                    <button className=\"stealth\" onClick={() => setView('marketplace')}>Marketplace</button>\n                    <button className=\"stealth\" onClick={() => setView('badges')}>Badges</button>\n                </Nav>\n                <StudentProfileDropdown {...props} {...state} />\n            </Header>\n            <Sidebar>\n                <div className=\"StudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} {...state} />\n                    </div>\n                    <div className=\"studentStats\">\n                        <img className=\"statsIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"statsLabel\" onClick={() => setView('marketplace')}>{formatCoins(student.coins)}</span>\n                        <img className=\"statsIcon\" alt=\"badge icon\" src=\"assets/Badge_ico.svg\" />\n                        <span className=\"statsLabel\" onClick={() => setView('badges')}>{student.badges.length.toString()}</span>\n                    </div>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction StudentProfileDropdown(props) {\n    const { student } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <div className={`User ${expanded ? ' expanded' : ''}`}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{student.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={student.profilePic ? student.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              children={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView('account')}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView('settings')}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </div>\n    )\n}\n\nfunction Main(props) {\n    const { view, student } = props;\n    switch (view) {\n        case 'home': return <Homework {...props} />;\n        case 'closet': return <StudentCloset {...props} />\n        case 'marketplace': return <StudentMarketplace {...props} />;\n        case 'badges': return <StudentBadges {...props} />;\n        case 'account': return <MyAccount {...props} userType=\"student\" user={student} />;\n        default: return <Homework {...props} />;\n    }\n}\n\nfunction Homework(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState(null);\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n    }\n    useEffect(() => {\n        getHomework();\n    }, []);\n    const generateHomeworkModules = () => {\n        return homework.map(homework => (\n            <HomeworkModule key={`homeworkModule-${homework._id}`} {...props} {...homework} refreshHomework={getHomework} />\n        ));\n    };\n    return (\n        <div className=\"Main\">\n            <h1>My Homework Tracker</h1>\n            <div className=\"ViewHomework\">\n                {homework ? generateHomeworkModules() : ''}\n            </div>\n        </div>\n    );\n}\n\nfunction HomeworkModule(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        return assignments.map((info, index) => (\n            <Assignment key={`homeworkAssignment-${_id}-${index}`} {...props} index={index} {...info} _id={_id} />\n        ));\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"homeworkHeader\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"homeworkBody\">\n                <ul>\n                    <li className=\"smol\">\n                        <div>Assignments</div>\n                        <div>Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nfunction Assignment(props) {\n    const { _id, index, label, progress, recorded } = props;\n    const updateHomeworkProgress = async (value) => {\n        // todo don't wait for server response to visually update UI!!!\n        const response = await fetch(`/assignment/${_id}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div>\n                <div>{label}</div>\n                <div className=\"progress\">\n                    <button onClick={progress === 0 ? () => {} : () => updateHomeworkProgress(progress - 1)}\n                        className={`stealth${progress === 0 ? ' disabled' : ''}`}\n                        style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                    <ProgressBar percentage={(100 * progress) / 4} />\n                    <button onClick={progress === 4 ? () => {} : () => updateHomeworkProgress(progress + 1)}\n                        className={`stealth${progress === 4 ? ' disabled' : ''}`}\n                        style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n                </div>\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    const { percentage } = props;\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: percentage + '%' }}></div>\n        </div>\n    )\n}\n\nfunction StudentMarketplace(props) {\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentMarketplace\">\n                <h1>Marketplace</h1>\n                <Marketplace {...props} />\n            </div>\n        </div>\n    );\n}\n\nfunction StudentCloset(props) {\n    const { student, avatar } = props;\n    const handleUpdateAvatar = async () => {\n        const updatedAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const response = await fetch(`student/${student._id}/avatar`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: updatedAvatar\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshData();\n    }\n    const unsavedChanges = () => {\n        // there has got to be a better way todo this\n        const previewAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const trueAvatar = student.avatar;\n        if (trueAvatar.length !== previewAvatar.length) return true;\n        const trueAvatarObject = {};\n        const previewAvatarObject = {};\n        for (let id of trueAvatar) trueAvatarObject[id] = true;\n        for (let id of previewAvatar) previewAvatarObject[id] = true;\n        // checking if the two arrays have equal contents (regardless of order)\n        if ((previewAvatar.every(string => trueAvatarObject[string]))\n        && (trueAvatar.every(string => previewAvatarObject[string]))) {\n            return false;\n        }\n        else return true;\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Closet</h1>\n            <Closet {...props} />\n            {unsavedChanges() && <div className=\"buttons\"><Button onClick={handleUpdateAvatar} className=\"slideUpIn\">Save Changes</Button></div>}\n        </div>\n    );\n}\n\nfunction StudentBadges(props) {\n    const { student, badges } = props;\n    const badgesRef = useRef({});\n    const generateBadgeList = () => {\n        if (!student.badges.length) return \"You haven't earned any badges yet!\";\n        return badges.map(badge => {\n            const index = student.badges.findIndex(object => object.id === badge._id);\n            const studentHasBadge = index !== -1;\n            const badgeHasBeenRedeemed = () => {\n                if (!studentHasBadge) return;\n                if (student.badges[index].redeemed) return true;\n                return false;\n            }\n            const redeemBadge = async () => {\n                if (badgeHasBeenRedeemed()) return;\n                badgesRef.current[badge._id].classList.add('redeemed');\n                const response = await fetch(`/student/${student._id}/badge/redeemed`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        badgeId: badge._id,\n                        badgeValue: badge.value\n                    })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                props.refreshData();\n            }\n            if (studentHasBadge) return (\n                <div\n                  key={`badgeList-${badge._id}`}\n                  ref={(el) => badgesRef.current[badge._id] = el}\n                  className={`badgeItem${badgeHasBeenRedeemed() ? ' redeemed' : ''}`}>\n                    <img\n                        className=\"badgeImage\"\n                        alt={badge.name}\n                        src={badge.src} />\n                    <span className=\"badgeName\">{badge.name}</span>\n                    <span onClick={redeemBadge}>\n                        <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"badgeValue\">{badge.value}</span>\n                    </span>\n                </div>\n            );\n        });\n    }\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentBadges\">\n                <h1>My Badges</h1>\n                <div className=\"BadgeList\">\n                    {generateBadgeList()}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["101","102"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["103","104","105"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["106"],"import { useState, useEffect, useRef } from 'react';\nimport Loading from './Loading';\nimport Avatar from './Avatar';\nimport { prettifyDate } from '../utils';\nimport dayjs from 'dayjs';\nimport ContextMenu from './ContextMenu';\n\nexport default function ViewStudent(props) {\n    const { student, wearables } = props;\n    const [homework, setHomework] = useState([]);\n    const [avatar, setAvatar] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const state = { homework }\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n        setIsLoaded(true);\n    }\n    useEffect(() => {\n        setIsLoaded(false);\n        getHomework();\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, name, src, image } = wearables[index];\n            obj[category] = { _id, name, src, image };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student._id]);\n    const addNewHomework = () => {\n        let content = (\n            <div className=\"modalBox\">\n                <h2>{`Add homework for ${student.firstName}`}</h2>\n                <AddHomeworkForm {...props} {...state} refreshHomework={getHomework} />\n            </div>\n        )\n        props.updateModal(content);\n    }\n    if (!student) return;\n    if (!isLoaded) return <Loading />;\n    return (\n        <div className=\"Main\">\n            <div className=\"ViewStudent\">\n                <div className=\"viewStudentMain\">\n                    <div className=\"viewStudentHeader\">\n                        <h1>{student.firstName}'s Homework Progress</h1>\n                        <button className=\"stealth\" onClick={addNewHomework}><i className=\"fas fa-plus-circle\"></i></button>\n                    </div>\n                    <ViewHomework {...props} {...state} refreshHomework={getHomework} />\n                </div>\n                <div className=\"viewStudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} avatar={avatar} viewingAsTeacher={true} />\n                    </div>\n                    <StudentCoins {...props} />\n                    <div className=\"StudentStats\">\n                        <img className=\"statsIcon\" alt=\"badge icon\" src=\"assets/Badge_ico.svg\" />\n                        <span className=\"statsLabel\">{student.badges.length}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction StudentCoins(props) {\n    const { student } = props;\n    const [coinsCount, setCoinsCount] = useState(student.coins);\n    const [makingChanges, setMakingChanges] = useState(false);\n    useEffect(() => {\n        setMakingChanges(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [student._id]);\n    useEffect(() => {\n        setCoinsCount(student.coins);\n    }, [student.coins]);\n    const handleUpdateCoins = async () => {\n        const response = await fetch(`/student/${student._id}/coins`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                coins: coinsCount\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success=true message from server');\n        setMakingChanges(false);\n        props.refreshData();\n    }\n    const editCoinsButtons = () => {\n        return (\n            <div>\n                <button className=\"stealth link\" onClick={() => addCoins(-10)}><i className=\"fas fa-minus-circle\"></i></button>\n                <button className=\"stealth link\" onClick={() => addCoins(10)}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        )\n    }\n    const addCoins = (amount) => {\n        setCoinsCount(coinsCount + amount);\n    }\n    const formatCoins = (number) => number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return (\n        <div className=\"StudentStats\">\n            <img className=\"statsIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n            <span className=\"statsLabel\">{formatCoins(coinsCount)}</span>\n            <div className=\"editCoinsButton\">\n                {makingChanges ? editCoinsButtons() : <button className=\"stealth link\" onClick={() => setMakingChanges(true)}>Edit</button>}\n            </div>\n            {makingChanges && <div className=\"confirmChangesButton\">\n                <button className=\"secondary\" onClick={() => handleUpdateCoins(student._id)}>Save</button>\n                <button className=\"secondary greyed\" onClick={() => {\n                    setMakingChanges(false);\n                    setCoinsCount(student.coins);\n                }}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { homework } = props;\n    const viewHomework = () => {\n        if (!homework.length) return 'No homework exists for this student';\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...props} key={homework[i]._id} {...homework[i]} />)\n        }\n        return homeworkModules;\n    }\n    return (\n        <div className=\"ViewHomework\">\n            {viewHomework()}\n        </div>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const [showingMenu, updateShowingMenu] = useState(false);\n    const toggleMenu = () => {\n        updateShowingMenu(prevState => !prevState);\n    }\n    const showMenu = () => {\n        return (\n            <ContextMenu\n              position={null}\n              updateContextMenu={() => updateShowingMenu(false)}>\n                <ul className=\"editDelete\">\n                    <li><button onClick={editHomework}>Edit</button></li>\n                    <li><button onClick={confirmDeleteHomework}>Delete</button></li>\n                </ul>\n            </ContextMenu>\n        );\n    }\n    const editHomework = () => {\n        updateShowingMenu(false);\n        props.updateModal(<EditHomeworkForm {...props} />);\n    }\n    const confirmDeleteHomework = () => {\n        updateShowingMenu(false);\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>Are you sure you want to proceed?</h2>\n                This cannot be undone.\n                {options.loadingIcon\n                    ?   <Loading />\n                    :   <div className=\"buttons\">\n                            <button onClick={handleDeleteHomework}>Yes, I'm sure</button>\n                            <button className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                        </div>\n                    }\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const handleDeleteHomework = async () => {\n        const response = await fetch(`/student/homework/${_id}`, { method: 'DELETE' });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const homeworkAssignments = () => {\n        const assignmentsList = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsList.push(<Assignment {...props} homeworkId={_id} key={assignments[i]._id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsList;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"homeworkHeader\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n                <div className=\"options\">\n                    <button className=\"stealth\" onClick={toggleMenu}><i className=\"fas fa-bars\"></i></button>\n                    {showingMenu && showMenu()}\n                </div>\n            </div>\n            <div className=\"homeworkBody\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { student, homeworkId } = props;\n    const coinsNumber = useRef(null);\n    const addCoins = async (index, recorded = true) => {\n        if (props.recorded) return;\n        const response = await fetch(`/assignment/${homeworkId}/recorded`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                recorded\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        const updateCoins = async () => {\n            let coinsCount = parseInt(coinsNumber.current.innerHTML);\n            coinsCount += student.coins;\n            const response = await fetch(`/student/${student._id}/coins`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    coins: coinsCount\n                })\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no { success: true } message from server');\n            console.log('success!!!!!');\n            props.refreshData();\n            props.refreshHomework();\n        }\n        updateCoins();\n    }\n    const updateHomeworkProgress = async (index, value) => {\n        const response = await fetch(`/student/homework/assignment/${homeworkId}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <input type=\"range\"\n                    min=\"0\" max=\"4\"\n                    defaultValue={props.progress.toString()}\n                    onChange={(e) => updateHomeworkProgress(props.index, e.target.value)}\n                    disabled={props.recorded ? true : false} />\n                {(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`} onClick={() => addCoins(props.index)}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span ref={coinsNumber}>{`${props.progress * 20}`}</span>\n                    </div>}\n            </div>\n        </li>\n    )\n}\n\nfunction AddHomeworkForm(props) {\n    const { student } = props;\n    const [formData, updateFormData] = useState({\n        date: dayjs().format('YYYY-MM-DD'),\n        headline: '',\n        assignments: [{}, {}, {}, {}]\n    });\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/${student._id}/homework`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshData();\n        props.refreshHomework();\n    }\n    const handleAddAssignment = (index, label) => {\n        let { assignments } = formData;\n        let item = assignments[index];\n        item = { label: label, progress: 0 }\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    const today = () => {\n        return dayjs().format('YYYY-MM-DD');\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={today()} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" onChange={(e) => handleAddAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" onChange={(e) => handleAddAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" onChange={(e) => handleAddAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" onChange={(e) => handleAddAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}\n\nfunction EditHomeworkForm(props) {\n    const { _id, date, headline, assignments } = props;\n    const [formData, updateFormData] = useState({ _id, date, headline, assignments });\n    const handleEditHomework = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/homework/${_id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const handleEditAssignment = (index, label) => {\n        let item = assignments[index];\n        item.label = label;\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleEditHomework} autoComplete=\"off\">\n            <h2>Edit homework for {prettifyDate(date)}</h2>\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={date.split('T')[0]} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" defaultValue={headline} onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" defaultValue={assignments[0].label} onChange={(e) => handleEditAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" defaultValue={assignments[1].label} onChange={(e) => handleEditAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" defaultValue={assignments[2].label} onChange={(e) => handleEditAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" defaultValue={assignments[3].label} onChange={(e) => handleEditAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",["107"],"import { useEffect } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function ContextMenu(props) {\n    useEffect(() => {\n        const closeContextMenu = (e) => {\n            if (props.ignoreClick) { // will be an array like ['.Modal', '#menu li']\n                for (let selector of props.ignoreClick) {\n                    if (elementHasParent(e.target, selector)) return;\n                }\n            }\n            props.updateContextMenu(false);\n        }\n        window.addEventListener('click', closeContextMenu);\n        return () => window.removeEventListener('click', closeContextMenu);\n    }, []);\n    return (\n        <div className=\"ContextMenu\" style={props.position}>\n            {props.children}\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["108","109"],"import { useEffect, useRef, useState } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function Dropdown(props) {\n    const { defaultValue, listItems, restoreDefault } = props;\n    const [display, setDisplay] = useState(() => {\n        if (!listItems || !listItems.length) return 'Add new...';\n        if (!defaultValue) return 'Select one';\n        return defaultValue.display;\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [addingNew, setAddingNew] = useState(false);\n    const dropdownList = useRef(null);\n    useEffect(() => {\n        const closeDropdown = (e) => {\n            if (elementHasParent(e.target, '.dropdownDisplay')) return;\n            if (elementHasParent(e.target, '.addNew')) return;\n            setIsOpen(false);\n        }\n        window.addEventListener('click', closeDropdown);\n        return () => window.removeEventListener('click', closeDropdown);\n    }, []);\n    useEffect(() => {\n        if (!dropdownList || !dropdownList.current) return;\n        if (isOpen) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px'; // plus 1px to account for 1px bottom border\n        else {\n            dropdownList.current.style.maxHeight = '0px';\n            setAddingNew(false); // unrelated to maxHeight adjustment thing\n        }\n    }, [isOpen]);\n    useEffect(() => {\n        if (addingNew) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px';\n    }, [addingNew]);\n    useEffect(() => {\n        if (restoreDefault) setDisplay(defaultValue.display);\n    }, [restoreDefault]);\n    const toggleIsOpen = () => setIsOpen(prevState => !prevState);\n    const handleClick = (e) => {\n        setDisplay(e.target.innerHTML);\n        props.onChange(e.target.getAttribute('data-value'));\n    }\n    const generateList = () => {\n        const buttonForAddNew =\n            <AddNew {...props}\n                key=\"dropdownItem-addNew\"\n                addingNew={addingNew}\n                updateAddingNew={setAddingNew}\n                updateIsOpen={setIsOpen}\n                updateDisplay={setDisplay}\n            />;\n        if ((!listItems || !listItems.length) && props.addNew) {\n            console.table(listItems);\n            return buttonForAddNew;\n        }\n        const array = [];\n        for (let item of listItems) {\n            array.push(\n                <li className=\"dropdownItem\" key={`dropdownItem-${item.value}`}>\n                    <button type=\"button\" data-value={item.value} onClick={handleClick}>{item.display}</button>\n                </li>\n            );\n        }\n        if (props.addNew) array.push(buttonForAddNew);\n        return array;\n    }\n    return (\n        <div className={`Dropdown${isOpen ? ' expanded' : ''}`} style={props.style}>\n            <div className=\"dropdownDisplay\" onClick={toggleIsOpen}>{display}</div>\n            <ul className=\"dropdownList\" ref={dropdownList}>{generateList()}</ul>\n        </div>\n    );\n}\n\nfunction AddNew(props) {\n    const { addingNew } = props;\n    const [inputValue, setInputValue] = useState(null);\n    const inputRef = useRef(null);\n    useEffect(() => {\n        if (!addingNew) return setInputValue(null);\n        inputRef.current.focus();\n        const handleKeydown = (e) => {\n            if (e.key === 'Escape') return props.updateAddingNew(false);\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                props.addNew(inputRef.current.value);\n                props.updateDisplay(inputRef.current.value);\n                props.onChange(inputRef.current.value);\n                props.updateIsOpen(false);\n                return;\n            }\n        }\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [addingNew]);\n    return (\n        <li className=\"dropdownItem\">\n            {addingNew\n                ?   <button type=\"button\" className=\"addNew active\">\n                        <input\n                            ref={inputRef}\n                            type=\"text\"\n                            defaultValue={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                        />\n                        <span className=\"inputHint\">Press Enter to submit, Esc to cancel.</span>\n                    </button>\n                :   <button type=\"button\" className=\"addNew\" onClick={() => props.updateAddingNew(true)}>\n                        {props.buttonContent || 'Add new...'}\n                    </button>\n                }\n        </li>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",["110","111"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":5,"column":19,"nodeType":"120","messageId":"121","endLine":5,"endColumn":31},{"ruleId":"112","replacedBy":"122"},{"ruleId":"114","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":24,"column":8,"nodeType":"126","endLine":24,"endColumn":30,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":119,"column":8,"nodeType":"126","endLine":119,"endColumn":10,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":270,"column":33,"nodeType":"132","messageId":"133","endLine":270,"endColumn":35},{"ruleId":"124","severity":1,"message":"134","line":39,"column":8,"nodeType":"126","endLine":39,"endColumn":21,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":164,"column":8,"nodeType":"126","endLine":164,"endColumn":17,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":218,"column":21,"nodeType":"140","endLine":223,"endColumn":23},{"ruleId":"124","severity":1,"message":"141","line":450,"column":8,"nodeType":"126","endLine":450,"endColumn":10,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"143","line":482,"column":8,"nodeType":"126","endLine":482,"endColumn":21,"suggestions":"144"},{"ruleId":"124","severity":1,"message":"145","line":33,"column":8,"nodeType":"126","endLine":33,"endColumn":21,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"147","line":16,"column":8,"nodeType":"126","endLine":16,"endColumn":10,"suggestions":"148"},{"ruleId":"124","severity":1,"message":"149","line":36,"column":8,"nodeType":"126","endLine":36,"endColumn":24,"suggestions":"150"},{"ruleId":"124","severity":1,"message":"147","line":94,"column":8,"nodeType":"126","endLine":94,"endColumn":19,"suggestions":"151"},{"ruleId":"130","severity":1,"message":"131","line":10,"column":60,"nodeType":"132","messageId":"133","endLine":10,"endColumn":62},{"ruleId":"130","severity":1,"message":"131","line":35,"column":40,"nodeType":"132","messageId":"133","endLine":35,"endColumn":42},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["152"],["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wearables'. Either include it or remove the dependency array.","ArrayExpression",["154"],"React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["155"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'image.x' and 'image.y'. Either include them or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'elementPosition.x', 'elementPosition.y', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["159"],"React Hook useEffect has missing dependencies: 'getHomework', 'student.avatar', and 'wearables'. Either include them or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["161"],"React Hook useEffect has a missing dependency: 'defaultValue.display'. Either include it or remove the dependency array.",["162"],["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [student.avatar, view, wearables]",{"range":"184","text":"185"},"Update the dependencies array to be: [getHomework]",{"range":"186","text":"187"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"188","text":"189"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"190","text":"191"},"Update the dependencies array to be: [image.x, image.y]",{"range":"192","text":"193"},"Update the dependencies array to be: [elementPosition.x, elementPosition.y, mouseIsDown, props]",{"range":"194","text":"195"},"Update the dependencies array to be: [getHomework, student._id, student.avatar, wearables]",{"range":"196","text":"197"},"Update the dependencies array to be: [props]",{"range":"198","text":"199"},"Update the dependencies array to be: [defaultValue.display, restoreDefault]",{"range":"200","text":"201"},"Update the dependencies array to be: [addingNew, props]",{"range":"202","text":"203"},[1097,1119],"[student.avatar, view, wearables]",[5374,5376],"[getHomework]",[1597,1610],"[getTeacherData, teacher._id]",[6311,6320],"[addNewWearable, teacher, wearableModal]",[19908,19910],"[image.x, image.y]",[21192,21205],"[elementPosition.x, elementPosition.y, mouseIsDown, props]",[1480,1493],"[getHomework, student._id, student.avatar, wearables]",[632,634],"[props]",[1586,1602],"[defaultValue.display, restoreDefault]",[3829,3840],"[addingNew, props]"]