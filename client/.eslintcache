[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19"},{"size":500,"mtime":1607403407622,"results":"20","hashOfConfig":"21"},{"size":2547,"mtime":1613722856655,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1607403407623,"results":"23","hashOfConfig":"21"},{"size":917,"mtime":1613115514815,"results":"24","hashOfConfig":"21"},{"size":97,"mtime":1607733049448,"results":"25","hashOfConfig":"21"},{"size":617,"mtime":1613104797140,"results":"26","hashOfConfig":"21"},{"size":8335,"mtime":1613697034845,"results":"27","hashOfConfig":"21"},{"size":410,"mtime":1613709289227,"results":"28","hashOfConfig":"21"},{"size":684,"mtime":1612233978520,"results":"29","hashOfConfig":"21"},{"size":965,"mtime":1612233987275,"results":"30","hashOfConfig":"21"},{"size":11170,"mtime":1613728655872,"results":"31","hashOfConfig":"21"},{"size":20511,"mtime":1613728205543,"results":"32","hashOfConfig":"21"},{"size":16724,"mtime":1613614398225,"results":"33","hashOfConfig":"21"},{"size":16594,"mtime":1613725193258,"results":"34","hashOfConfig":"21"},{"size":763,"mtime":1613722986777,"results":"35","hashOfConfig":"21"},{"size":4605,"mtime":1613727432852,"results":"36","hashOfConfig":"21"},{"size":714,"mtime":1613378750044,"results":"37","hashOfConfig":"21"},{"size":2768,"mtime":1613431931954,"results":"38","hashOfConfig":"21"},{"size":1834,"mtime":1613715784896,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"sahw5t",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["86","87"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["88","89"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",["90"],"import { ReactComponent as LoadingIcon } from './Loading.svg';\n\nfunction Loading(props) {\n    const { width, height } = props;\n    const style = new Object();\n    if (width) style.width = width + 'px';\n    if (height) style.height = height + 'px';\n    return (\n        <div className={`Loading${height ? ' mini' : ''}`} style={style}>\n            <LoadingIcon />\n        </div>\n    )\n}\n\nexport default Loading;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],["91","92"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["93","94","95"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["96","97"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["98","99"],"import { useState, useRef, useEffect } from 'react';\nimport Loading from './Loading';\nimport { shrinkit } from '../utils';\nimport Dropdown from './Dropdown';\n\nexport default function Marketplace(props) {\n    const { viewingAsTeacher, student, teacher, wearables } = props;\n    const [preview, setPreview] = useState({});\n    const [category, setCategory] = useState(() => teacher.wearableCategories[0]);\n    const wearableRefs = useRef({});\n    const editOrDeleteWearable = (e, _id) => {\n        e.preventDefault();\n        if (!viewingAsTeacher) return;\n        const index = wearables.findIndex(wearable => wearable._id === _id);\n        const thisWearable = wearables[index];\n        const editWearable = () => props.updateModal(<AddOrEditWearable {...props} wearable={thisWearable} />);\n        const deleteWearable = () => {\n            const handleDelete = async (e) => {\n                e.preventDefault();\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/wearable/${_id}`, { method: 'DELETE' });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                shrinkit(wearableRefs.current[_id], true);\n                props.refreshTeacher();\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Are you sure?</h2>\n                    <img alt={thisWearable.name} src={thisWearable.src} style={{ float: 'right' }} />\n                    Are you sure you want to delete the wearable \"{thisWearable.name}\"? This action cannot be undone.\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ?   <Loading />\n                            :   <form onSubmit={handleDelete}>\n                                    <button type=\"submit\">Yes, I'm sure</button>\n                                    <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                </form>\n                            }\n                    </div>\n                </div>\n            )\n            props.updateModal(content());\n        }\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={editWearable}>Edit</button></li>\n                <li><button onClick={deleteWearable}>Delete</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const updatePreview = ({ category, _id, name, src, value }) => {\n        if (preview[category] && preview[category].name === name) {\n            const previewObjectMinusCategory = (prevState) => {\n                const object = {...prevState};\n                delete object[category];\n                return object;\n            }\n            setPreview(prevState => ({\n                ...previewObjectMinusCategory(prevState)\n            }));\n            return;\n        }\n        setPreview(prevState => ({\n            ...prevState,\n            [category]: { _id, name, src, value }\n        }));\n    }\n    const addOrEditCategory = (e, originalName) => {\n        e.preventDefault();\n        if (!viewingAsTeacher) return;\n        const editingCategory = teacher.wearableCategories.includes(originalName);\n        const handleAddOrEditCategory = async (e, categoryName) => {\n            e.preventDefault();\n            props.updateModal(content({ loadingIcon: true }));\n            const fromDropdown = !!categoryName;\n            const formData = editingCategory\n                ?   { originalName, updatedName: e.target[0].value }\n                :   { categoryName: fromDropdown ? categoryName : e.target[0].value }\n            const response = await fetch(`/teacher/${teacher._id}/wearable-category`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formData)\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no success response from server');\n            props.refreshTeacher();\n            if (editingCategory) {\n                props.refreshData(); // in case any wearables were affected by category name change\n                if (category === originalName) setCategory(e.target[0].value);\n            }\n            props.updateModal(false);\n        }\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>{editingCategory ? 'Edit' : 'Add new'} category</h2>\n                <form onSubmit={handleAddOrEditCategory} autoComplete=\"off\">\n                    <label htmlFor=\"categoryName\">Category name:</label>\n                    <input type=\"text\" name=\"categoryName\" defaultValue={editingCategory ? originalName : ''} />\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ? <Loading />\n                            : <input type=\"submit\" />\n                        }\n                    </div>\n                </form>\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const editCategory = (e, categoryName) => {\n        if (!viewingAsTeacher) return;\n        e.preventDefault();\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={(e) => addOrEditCategory(e, categoryName)}>Edit</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const studentOperations = {\n        buyWearable: ({ _id, name, src, value }) => {\n            if (viewingAsTeacher) return;\n            const handleSubmit = async (e) => {\n                e.preventDefault();\n                if (student.coins < value) {\n                    let cantAfford = (\n                        <div className=\"modalBox\">\n                            <h2>Not enough coins</h2>\n                            You don't have enough coins to purchase this item. It costs {value} and you only have {student.coins}.\n                            <div className=\"buttons\">\n                                <button type=\"button\" onClick={() => props.updateModal(false)}>OK</button>\n                            </div>\n                        </div>\n                    );\n                    props.updateModal(cantAfford);\n                    return;\n                }\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/student/${student._id}/closet`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        wearableId: _id,\n                        wearableCost: value\n                    })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Confirm purchase</h2>\n                    <img alt={name} src={src} style={{ float: 'right' }} />\n                    Are you sure you want to purchase <b>{name}</b> for <b>{value}</b>?\n                    <div className=\"buttons\">\n                    {options.loadingIcon\n                        ?   <Loading />\n                        :   <form onSubmit={handleSubmit}>\n                                <button type=\"submit\">Yes, I'm sure</button>\n                                <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                            </form>\n                        }\n                    </div>\n                </div>\n            );\n            props.updateModal(content());\n        }\n    }\n    const generate = {\n        previewObject: (preview) => {\n            const images = [];\n            for (let category in preview) {\n                images.push(<img key={`marketplacePreview-${category}`} src={preview[category].src} className={category} />);\n            }\n            return <div className=\"previewBox\">{images}</div>;\n        },\n        previewDescription: (preview) => {\n            if (viewingAsTeacher) return;\n            const previewItems = [];\n            for (let category in preview) {\n                previewItems.push(\n                    <li key={`marketplacePreviewDescription-${category}`}>\n                        <span className=\"wearableName\">{preview[category].name}</span>\n                        {!viewingAsTeacher && student.closet.includes(preview[category]._id)\n                            ?   <span className=\"owned\"></span>\n                            :   <button onClick={() => studentOperations.buyWearable(preview[category])}>\n                                    <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                                    <span className=\"wearableValue\">{preview[category].value}</span>\n                                </button>\n                            }\n                    </li>\n                )\n            }\n            return (\n                <ul className=\"previewDescription\">\n                    <h3>Trying On:</h3>\n                    {previewItems}\n                </ul>\n            );\n        },\n        categoriesList: (categories) => {\n            const array = categories.map(category => (\n                <button\n                  key={`wearableCategories-toolbar-${category}`}\n                  className=\"stealth\"\n                  onClick={() => setCategory(category)}\n                  onContextMenu={(e) => editCategory(e, category)}>\n                    {category}\n                </button>\n            ))\n            if (viewingAsTeacher) array.push(\n                <button key=\"wearableCategories-toolbar-addNew\" className=\"add\" onClick={addOrEditCategory}></button>\n            );\n            return array;\n        },\n        wearablesList: (category) => {\n            const filteredList = wearables.filter(wearable => wearable.category === category);\n            return filteredList.map(wearable => (\n                <button\n                  ref={(el) => wearableRefs.current[wearable._id] = el}\n                  key={`${category}-wearable-${wearable.name}`}\n                  className=\"stealth wearableItem\"\n                  onClick={() => updatePreview(wearable)}\n                  onContextMenu={(e) => editOrDeleteWearable(e, wearable._id)}>\n                    <img\n                        alt={wearable.name}\n                        src={wearable.src}\n                    />\n                    <span className=\"wearableName\">{wearable.name}</span>\n                    <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                    <span className=\"wearableValue\">{wearable.value}</span>\n                </button>\n            ));\n        }    \n    }\n    return (\n        <div className=\"Marketplace\">\n            <div className=\"marketplacePreview\">\n                {generate.previewObject(preview)}\n                {generate.previewDescription(preview)}\n            </div>\n            <div className=\"marketplaceCategories\">\n                {generate.categoriesList(teacher.wearableCategories)}\n            </div>\n            <div className=\"marketplaceWearables\">\n                <div className=\"wearablesGrid\">\n                    {generate.wearablesList(category)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport function AddOrEditWearable(props) {\n    const { teacher, wearable } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        _id: wearable ? wearable._id : '',\n        teacherCode: wearable ? wearable.teacherCode : teacher._id,\n        name: wearable ? wearable.name : '',\n        category: wearable ? wearable.category : teacher.wearableCategories[0],\n        src: wearable ? wearable.src : '',\n        value: wearable ? wearable.value : ''\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        const ROUTE = wearable ? `/wearable/${wearable._id}` : '/wearable';\n        const response = await fetch(ROUTE, {\n            method: wearable ? 'PUT' : 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.updateModal(false);\n        props.refreshData();\n    }\n    const addCategory = async (categoryName) => {\n        const response = await fetch(`/teacher/${teacher._id}/wearable-category`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                _id: teacher._id,\n                categoryName\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshTeacher();\n    }\n    const dropdownListItems = () => {\n        const listItems = teacher.wearableCategories.map(item => ({\n            value: item,\n            display: item\n        }));\n        return listItems;\n    }\n    return (\n        <div className=\"modalBox\">\n            <h2>Add new wearable</h2>\n            <form className=\"pad\" onSubmit={handleSubmit}>\n                <div className=\"addWearableForm\">\n                    <div>\n                        <label htmlFor=\"name\">Wearable name:</label>\n                        <input\n                            type=\"text\"\n                            defaultValue={wearable ? wearable.name : ''}\n                            onChange={(e) => updateFormData('name', e.target.value)} />\n                        <label htmlFor=\"value\">Category:</label>\n                        <Dropdown\n                            minWidth=\"10rem\"\n                            defaultValue={{ value: formData.category, display: formData.category }}\n                            listItems={dropdownListItems()}\n                            addNew={addCategory}\n                            onChange={(value) => updateFormData('category', value)} />\n                        <label htmlFor=\"src\">Image link:</label>\n                        <input type=\"text\" defaultValue={wearable ? wearable.src : ''} onChange={(e) => updateFormData('src', e.target.value)} />\n                        <label htmlFor=\"value\">Wearable value:</label>\n                        <input type=\"text\" defaultValue={wearable ? wearable.value : ''} onChange={(e) => updateFormData('value', e.target.value)} />\n                    </div>\n                    <AddOrEditWearablePreview image={formData.src} />\n                </div>\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    );\n}\n\nfunction AddOrEditWearablePreview(props) {\n    const { image } = props;\n    const draggable = useRef(null);\n    useEffect(() => {\n        const draggableObject = draggable.current;\n        const dragElement = () => {\n\n        }\n        draggableObject.addEventListener('mousedown', dragElement);\n        return () => draggableObject.removeEventListener('mousedown', dragElement);\n    }, []);\n    return (\n        <div>\n            <label>Preview:</label>\n            <div className=\"previewBox\">\n                <img src={image} ref={draggable} />\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["100"],"import { useState, useEffect, useRef } from 'react';\nimport Loading from './Loading';\nimport { prettifyDate } from '../utils';\nimport dayjs from 'dayjs';\nimport ContextMenu from './ContextMenu';\n\nexport default function ViewStudent(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState([]);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const state = { homework }\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n        setIsLoaded(true);\n    }\n    useEffect(() => {\n        setIsLoaded(false);\n        getHomework();\n    }, [student._id]);\n    const addNewHomework = () => {\n        let content = (\n            <div className=\"modalBox\">\n                <h2>{`Add homework for ${student.firstName}`}</h2>\n                <AddHomeworkForm {...props} {...state} refreshHomework={getHomework} />\n            </div>\n        )\n        props.updateModal(content);\n    }\n    if (!student) return;\n    if (!isLoaded) return <Loading />;\n    return (\n        <div className=\"Main\">\n            <div className=\"ViewStudent\">\n                <div className=\"viewStudentHeader\">\n                    <h1>{student.firstName}'s Homework Progress</h1>\n                    <button className=\"stealth\" onClick={addNewHomework}><i className=\"fas fa-plus-circle\"></i></button>\n                </div>\n                <div className=\"viewStudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <img alt=\"student avatar\" className=\"studentAvatar\" src=\"https://lh3.googleusercontent.com/ImpxcbOUkhCIrWcHgHIDHmmvuFznNSGn2y1mor_hLqpYjI6Q1J7XAVvpR-I24ZOJL3s\" />\n                    </div>\n                    <StudentCoins {...props} />\n                </div>\n                <div className=\"viewStudentHomework\">\n                    <ViewHomework {...props} {...state} refreshHomework={getHomework} />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction StudentCoins(props) {\n    const { student } = props;\n    const [coinsCount, updateCoinsCount] = useState(student.coins);\n    const [makingChanges, updateMakingChanges] = useState(false);\n    useEffect(() => {\n        updateMakingChanges(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [student._id]);\n    useEffect(() => {\n        updateCoinsCount(student.coins);\n    }, [student.coins]);\n    const handleUpdateCoins = async () => {\n        const response = await fetch(`/student/${student._id}/coins`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                coins: coinsCount\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success=true message from server');\n        updateMakingChanges(false);\n        props.refreshData();\n    }\n    const editCoinsButtons = () => {\n        return (\n            <div>\n                <button className=\"stealth link\" onClick={() => addCoins(-10)}><i className=\"fas fa-minus-circle\"></i></button>\n                <button className=\"stealth link\" onClick={() => addCoins(10)}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        )\n    }\n    const addCoins = (amount) => {\n        updateCoinsCount(coinsCount + amount);\n    }\n    return (\n        <div className=\"StudentCoins\">\n            <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n            <span className=\"coinsCount\">{coinsCount.toString()}</span>\n            <div className=\"editCoinsButton\">\n                {makingChanges ? editCoinsButtons() : <button className=\"stealth link\" onClick={() => updateMakingChanges(true)}>Edit</button>}\n            </div>\n            {makingChanges && <div className=\"confirmChangesButton\">\n                <button className=\"secondary\" onClick={() => handleUpdateCoins(student._id)}>Save</button>\n                <button className=\"secondary greyed\" onClick={() => {\n                    updateMakingChanges(false);\n                    updateCoinsCount(student.coins);\n                }}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { homework } = props;\n    const viewHomework = () => {\n        if (!homework.length) return 'No homework exists for this student';\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...props} key={homework[i]._id} {...homework[i]} />)\n        }\n        return homeworkModules;\n    }\n    return (\n        <div className=\"ViewHomework\">\n            {viewHomework()}\n        </div>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const [showingMenu, updateShowingMenu] = useState(false);\n    const toggleMenu = () => {\n        updateShowingMenu(prevState => !prevState);\n    }\n    const showMenu = () => {\n        return (\n            <ContextMenu\n              position={null}\n              updateContextMenu={() => updateShowingMenu(false)}>\n                <ul className=\"editDelete\">\n                    <li><button onClick={editHomework}>Edit</button></li>\n                    <li><button onClick={confirmDeleteHomework}>Delete</button></li>\n                </ul>\n            </ContextMenu>\n        );\n    }\n    const editHomework = () => {\n        updateShowingMenu(false);\n        props.updateModal(<EditHomeworkForm {...props} />);\n    }\n    const confirmDeleteHomework = () => {\n        updateShowingMenu(false);\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>Are you sure you want to proceed?</h2>\n                This cannot be undone.\n                {options.loadingIcon\n                    ?   <Loading />\n                    :   <div className=\"buttons\">\n                            <button onClick={handleDeleteHomework}>Yes, I'm sure</button>\n                            <button className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                        </div>\n                    }\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const handleDeleteHomework = async () => {\n        const response = await fetch(`/student/homework/${_id}`, { method: 'DELETE' });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const homeworkAssignments = () => {\n        const assignmentsList = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsList.push(<Assignment {...props} homeworkId={_id} key={assignments[i]._id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsList;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n                <div className=\"options\">\n                    <button className=\"stealth\" onClick={toggleMenu}><i className=\"fas fa-bars\"></i></button>\n                    {showingMenu && showMenu()}\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { student, homeworkId } = props;\n    const coinsNumber = useRef(null);\n    const addCoins = async (index, recorded = true) => {\n        if (props.recorded) return;\n        const response = await fetch(`/student/homework/assignment/${homeworkId}/recorded`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                recorded\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        const updateCoins = async () => {\n            let coinsCount = parseInt(coinsNumber.current.innerHTML);\n            coinsCount += student.coins;\n            const response = await fetch(`/student/${student._id}/coins`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    coins: coinsCount\n                })\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no { success: true } message from server');\n            console.log('success!!!!!');\n            props.refreshData();\n            props.refreshHomework();\n        }\n        updateCoins();\n    }\n    const updateHomeworkProgress = async (index, value) => {\n        const response = await fetch(`/student/homework/assignment/${homeworkId}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <input type=\"range\"\n                    min=\"0\" max=\"4\"\n                    defaultValue={props.progress.toString()}\n                    onChange={(e) => updateHomeworkProgress(props.index, e.target.value)}\n                    disabled={props.recorded ? true : false} />\n                {(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`} onClick={() => addCoins(props.index)}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span ref={coinsNumber}>{`${props.progress * 20}`}</span>\n                    </div>}\n            </div>\n        </li>\n    )\n}\n\nfunction AddHomeworkForm(props) {\n    const { student } = props;\n    const [formData, updateFormData] = useState({\n        date: dayjs().format('YYYY-MM-DD'),\n        headline: '',\n        assignments: [{}, {}, {}, {}]\n    });\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/${student._id}/homework`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshData();\n        props.refreshHomework();\n    }\n    const handleAddAssignment = (index, label) => {\n        let { assignments } = formData;\n        let item = assignments[index];\n        item = { label: label, progress: 0 }\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    const today = () => {\n        return dayjs().format('YYYY-MM-DD');\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={today()} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" onChange={(e) => handleAddAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" onChange={(e) => handleAddAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" onChange={(e) => handleAddAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" onChange={(e) => handleAddAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}\n\nfunction EditHomeworkForm(props) {\n    const { _id, date, headline, assignments } = props;\n    const [formData, updateFormData] = useState({ _id, date, headline, assignments });\n    const handleEditHomework = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/homework/${_id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const handleEditAssignment = (index, label) => {\n        let item = assignments[index];\n        item.label = label;\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleEditHomework} autoComplete=\"off\">\n            <h2>Edit homework for {prettifyDate(date)}</h2>\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={date.split('T')[0]} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" defaultValue={headline} onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" defaultValue={assignments[0].label} onChange={(e) => handleEditAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" defaultValue={assignments[1].label} onChange={(e) => handleEditAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" defaultValue={assignments[2].label} onChange={(e) => handleEditAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" defaultValue={assignments[3].label} onChange={(e) => handleEditAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",["101"],"import { useEffect } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function ContextMenu(props) {\n    useEffect(() => {\n        const closeContextMenu = (e) => {\n            if (props.ignoreClick) { // will be an array like ['.Modal', '#menu li']\n                for (let selector of props.ignoreClick) {\n                    if (elementHasParent(e.target, selector)) return;\n                }\n            }\n            props.updateContextMenu(false);\n        }\n        window.addEventListener('click', closeContextMenu);\n        return () => window.removeEventListener('click', closeContextMenu);\n    }, []);\n    return (\n        <div className=\"ContextMenu\" style={props.position}>\n            {props.children}\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["102","103"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",["104","105"],"import { useState } from 'react';\n\nexport default function Closet(props) {\n    const { closet, avatar, teacher } = props;\n    const [category, setCategory] = useState(() => {\n        return teacher.wearableCategories.find(category => closet.some(wearable => wearable.category === category));\n    });\n    const generate = {\n        categoriesList: (closet) => {\n            return teacher.wearableCategories.map(category => {\n                const someClosetItemHasCategory = closet.some(wearable => wearable.category === category);\n                if (someClosetItemHasCategory) return (\n                    <button\n                      key={`closet-wearableCategories-${category}`}\n                      className=\"stealth\"\n                      onClick={() => setCategory(category)}>\n                          {category}\n                    </button>\n                )\n            });\n        },\n        wearablesList: (category) => {\n            const previewWearable = ({ category, _id, src }) => {\n                props.updateAvatar(prevState => {\n                    if (prevState[category] && prevState[category]._id === _id) {\n                        let prevStateMinusThisCategory = {...prevState};\n                        delete prevStateMinusThisCategory[category];\n                        return prevStateMinusThisCategory;\n                    }\n                    return ({\n                        ...prevState,\n                        [category]: { _id, src }\n                    });\n                });\n            }\n            return closet.map(wearable => {\n                const currentlyPreviewing = avatar[wearable.category] && avatar[wearable.category]._id === wearable._id;\n                if (wearable.category === category) return (\n                    <button\n                      key={`closetItem-${category}-${wearable._id}`}\n                      className={`stealth closetItem${currentlyPreviewing ? ' active' : ''}`} // if currently previewing, add light green background or something\n                      onClick={() => previewWearable(wearable)}>\n                        <img alt={wearable.name} src={wearable.src} />\n                        <span className=\"wearableName\">{wearable.name}</span>\n                    </button>\n                );\n            });\n        }\n    }\n    return (\n        <div className=\"Closet\">\n            <div id=\"demo\" onClick={() => console.table(props.avatar)}></div>\n            <div className=\"closetCategories\">\n                {generate.categoriesList(closet)}\n            </div>\n            <div className=\"closetWearables\">\n                <div className=\"wearablesGrid\">\n                    {generate.wearablesList(category)}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"106","replacedBy":"110"},{"ruleId":"108","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":5,"column":19,"nodeType":"114","messageId":"115","endLine":5,"endColumn":31},{"ruleId":"106","replacedBy":"116"},{"ruleId":"108","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":23,"column":8,"nodeType":"120","endLine":23,"endColumn":30,"suggestions":"121"},{"ruleId":"118","severity":1,"message":"122","line":112,"column":8,"nodeType":"120","endLine":112,"endColumn":10,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":260,"column":33,"nodeType":"126","messageId":"127","endLine":260,"endColumn":35},{"ruleId":"118","severity":1,"message":"128","line":39,"column":8,"nodeType":"120","endLine":39,"endColumn":21,"suggestions":"129"},{"ruleId":"118","severity":1,"message":"130","line":163,"column":8,"nodeType":"120","endLine":163,"endColumn":17,"suggestions":"131"},{"ruleId":"132","severity":1,"message":"133","line":192,"column":29,"nodeType":"134","endLine":192,"endColumn":124},{"ruleId":"132","severity":1,"message":"133","line":381,"column":17,"nodeType":"134","endLine":381,"endColumn":52},{"ruleId":"118","severity":1,"message":"122","line":23,"column":8,"nodeType":"120","endLine":23,"endColumn":21,"suggestions":"135"},{"ruleId":"118","severity":1,"message":"136","line":16,"column":8,"nodeType":"120","endLine":16,"endColumn":10,"suggestions":"137"},{"ruleId":"118","severity":1,"message":"138","line":36,"column":8,"nodeType":"120","endLine":36,"endColumn":24,"suggestions":"139"},{"ruleId":"118","severity":1,"message":"136","line":93,"column":8,"nodeType":"120","endLine":93,"endColumn":19,"suggestions":"140"},{"ruleId":"124","severity":1,"message":"125","line":10,"column":60,"nodeType":"126","messageId":"127","endLine":10,"endColumn":62},{"ruleId":"124","severity":1,"message":"125","line":36,"column":40,"nodeType":"126","messageId":"127","endLine":36,"endColumn":42},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],["141"],["142"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["141"],["142"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wearables'. Either include it or remove the dependency array.","ArrayExpression",["143"],"React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["144"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["145"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["146"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["147"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["148"],"React Hook useEffect has a missing dependency: 'defaultValue.display'. Either include it or remove the dependency array.",["149"],["150"],"no-global-assign","no-unsafe-negation",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [student.avatar, view, wearables]",{"range":"167","text":"168"},"Update the dependencies array to be: [getHomework]",{"range":"169","text":"170"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"171","text":"172"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"173","text":"174"},"Update the dependencies array to be: [getHomework, student._id]",{"range":"175","text":"176"},"Update the dependencies array to be: [props]",{"range":"177","text":"178"},"Update the dependencies array to be: [defaultValue.display, restoreDefault]",{"range":"179","text":"180"},"Update the dependencies array to be: [addingNew, props]",{"range":"181","text":"182"},[1026,1048],"[student.avatar, view, wearables]",[4799,4801],"[getHomework]",[1586,1599],"[getTeacherData, teacher._id]",[6270,6279],"[addNewWearable, teacher, wearableModal]",[869,882],"[getHomework, student._id]",[632,634],"[props]",[1586,1602],"[defaultValue.display, restoreDefault]",[3787,3798],"[addingNew, props]"]