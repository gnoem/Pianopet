[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js":"20","/Users/ngw/Documents/Sites/Pianopet/client/src/components/PianopetBase.js":"21","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/ntc.js":"22","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Splat.js":"23"},{"size":500,"mtime":1607403407622,"results":"24","hashOfConfig":"25"},{"size":2611,"mtime":1614304106633,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1607403407623,"results":"27","hashOfConfig":"25"},{"size":1826,"mtime":1614160185854,"results":"28","hashOfConfig":"25"},{"size":97,"mtime":1607733049448,"results":"29","hashOfConfig":"30"},{"size":617,"mtime":1613104797140,"results":"31","hashOfConfig":"25"},{"size":8716,"mtime":1614306014271,"results":"32","hashOfConfig":"25"},{"size":410,"mtime":1613709289227,"results":"33","hashOfConfig":"25"},{"size":684,"mtime":1612233978520,"results":"34","hashOfConfig":"30"},{"size":965,"mtime":1612233987275,"results":"35","hashOfConfig":"25"},{"size":13195,"mtime":1614238683939,"results":"36","hashOfConfig":"25"},{"size":14957,"mtime":1614303254790,"results":"37","hashOfConfig":"25"},{"size":28184,"mtime":1614324105693,"results":"38","hashOfConfig":"25"},{"size":17432,"mtime":1614160220758,"results":"39","hashOfConfig":"25"},{"size":763,"mtime":1613722986777,"results":"40","hashOfConfig":"25"},{"size":4621,"mtime":1613791108724,"results":"41","hashOfConfig":"25"},{"size":1349,"mtime":1614325226622,"results":"42","hashOfConfig":"25"},{"size":3702,"mtime":1614325132253,"results":"43","hashOfConfig":"25"},{"size":1834,"mtime":1613715784896,"results":"44","hashOfConfig":"25"},{"size":6253,"mtime":1613975599081,"results":"45","hashOfConfig":"25"},{"size":1784,"mtime":1614323810625,"results":"46","hashOfConfig":"25"},{"size":44387,"mtime":1614317676027,"results":"47","hashOfConfig":"25"},{"size":2959,"mtime":1614319325962,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1e1hwtf",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"sahw5t",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"51"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"51"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"51"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"51"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"51"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"51"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["104","105"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["106","107"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",["108"],"import { ReactComponent as LoadingIcon } from './Loading.svg';\n\nfunction Loading(props) {\n    const { width, height } = props;\n    const style = new Object();\n    if (width) style.width = width + 'px';\n    if (height) style.height = height + 'px';\n    return (\n        <div className={`Loading${height ? ' mini' : ''}`} style={style}>\n            <LoadingIcon />\n        </div>\n    )\n}\n\nexport default Loading;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],["109","110"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["111","112","113"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport Closet from './Closet';\nimport Avatar from './Avatar';\nimport Marketplace from './Marketplace';\nimport ContextMenu from './ContextMenu';\nimport { prettifyDate } from '../utils';\nimport Button from './Button';\nimport MyAccount from './MyAccount';\n\nexport default function Student(props) {\n    const { student, wearables } = props;\n    const [view, setView] = useState('home');\n    const [avatar, setAvatar] = useState(null);\n    useEffect(() => {\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, name, src, image } = wearables[index];\n            obj[category] = { _id, name, src, image };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student.avatar, view]);\n    const closet = student.closet.map(_id => { // converting student.closet, which is an array of string IDs, to an array of objects\n        const index = wearables.findIndex(element => element._id === _id);\n        const thisWearable = wearables[index];\n        return thisWearable;\n    });\n    const formatCoins = (number) => number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    const state = {\n        view,\n        avatar,\n        closet,\n        updateView: setView,\n        updateAvatar: setAvatar\n    }\n    return (\n        <Dashboard teacher={false}>\n            <Header {...props} {...state}>\n                <Nav>\n                    <button className=\"stealth\" onClick={() => setView('home')}>Home</button>\n                    <button className=\"stealth\" onClick={() => setView('closet')}>Closet</button>\n                    <button className=\"stealth\" onClick={() => setView('marketplace')}>Marketplace</button>\n                    <button className=\"stealth\" onClick={() => setView('badges')}>Badges</button>\n                </Nav>\n                <StudentProfileDropdown {...props} {...state} />\n            </Header>\n            <Sidebar>\n                <div className=\"StudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} {...state} />\n                    </div>\n                    <div className=\"studentStats\">\n                        <img className=\"statsIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"statsLabel\" onClick={() => setView('marketplace')}>{formatCoins(student.coins)}</span>\n                        <img className=\"statsIcon\" alt=\"badge icon\" src=\"assets/Badge_ico.svg\" />\n                        <span className=\"statsLabel\" onClick={() => setView('badges')}>{student.badges.length.toString()}</span>\n                    </div>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction StudentProfileDropdown(props) {\n    const { student } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <div className={`User ${expanded ? ' expanded' : ''}`}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{student.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={student.profilePic ? student.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              children={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView('account')}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView('settings')}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </div>\n    )\n}\n\nfunction Main(props) {\n    const { view, student } = props;\n    switch (view) {\n        case 'home': return <Homework {...props} />;\n        case 'closet': return <StudentCloset {...props} />\n        case 'marketplace': return <StudentMarketplace {...props} />;\n        case 'badges': return <StudentBadges {...props} />;\n        case 'account': return <MyAccount {...props} userType=\"student\" user={student} />;\n        default: return <Homework {...props} />;\n    }\n}\n\nfunction Homework(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState(null);\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n    }\n    useEffect(() => {\n        getHomework();\n    }, []);\n    const generateHomeworkModules = () => {\n        return homework.map(homework => (\n            <HomeworkModule key={`homeworkModule-${homework._id}`} {...props} {...homework} refreshHomework={getHomework} />\n        ));\n    };\n    return (\n        <div className=\"Main\">\n            <h1>My Homework Tracker</h1>\n            <div className=\"ViewHomework\">\n                {homework ? generateHomeworkModules() : ''}\n            </div>\n        </div>\n    );\n}\n\nfunction HomeworkModule(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        return assignments.map((info, index) => (\n            <Assignment key={`homeworkAssignment-${_id}-${index}`} {...props} index={index} {...info} _id={_id} />\n        ));\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"homeworkHeader\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"homeworkBody\">\n                <ul>\n                    <li className=\"smol\">\n                        <div>Assignments</div>\n                        <div>Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nfunction Assignment(props) {\n    const { _id, index, label, progress, recorded } = props;\n    const updateHomeworkProgress = async (value) => {\n        // todo don't wait for server response to visually update UI!!!\n        const response = await fetch(`/assignment/${_id}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div>\n                <div>{label}</div>\n                <div className=\"progress\">\n                    <button onClick={progress === 0 ? () => {} : () => updateHomeworkProgress(progress - 1)}\n                        className={`stealth${progress === 0 ? ' disabled' : ''}`}\n                        style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                    <ProgressBar percentage={(100 * progress) / 4} />\n                    <button onClick={progress === 4 ? () => {} : () => updateHomeworkProgress(progress + 1)}\n                        className={`stealth${progress === 4 ? ' disabled' : ''}`}\n                        style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n                </div>\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    const { percentage } = props;\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: percentage + '%' }}></div>\n        </div>\n    )\n}\n\nfunction StudentMarketplace(props) {\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentMarketplace\">\n                <h1>Marketplace</h1>\n                <Marketplace {...props} />\n            </div>\n        </div>\n    );\n}\n\nfunction StudentCloset(props) {\n    const { student, avatar } = props;\n    const handleUpdateAvatar = async () => {\n        const updatedAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const response = await fetch(`student/${student._id}/avatar`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: updatedAvatar\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshData();\n    }\n    const unsavedChanges = () => {\n        // there has got to be a better way todo this\n        const previewAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const trueAvatar = student.avatar;\n        if (trueAvatar.length !== previewAvatar.length) return true;\n        const trueAvatarObject = {};\n        const previewAvatarObject = {};\n        for (let id of trueAvatar) trueAvatarObject[id] = true;\n        for (let id of previewAvatar) previewAvatarObject[id] = true;\n        // checking if the two arrays have equal contents (regardless of order)\n        if ((previewAvatar.every(string => trueAvatarObject[string]))\n        && (trueAvatar.every(string => previewAvatarObject[string]))) {\n            return false;\n        }\n        else return true;\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Closet</h1>\n            <Closet {...props} />\n            {unsavedChanges() && <div className=\"buttons\"><Button onClick={handleUpdateAvatar} className=\"slideUpIn\">Save Changes</Button></div>}\n        </div>\n    );\n}\n\nfunction StudentBadges(props) {\n    const { student, badges } = props;\n    const badgesRef = useRef({});\n    const generateBadgeList = () => {\n        if (!student.badges.length) return \"You haven't earned any badges yet!\";\n        return badges.map(badge => {\n            const index = student.badges.findIndex(object => object.id === badge._id);\n            const studentHasBadge = index !== -1;\n            const badgeHasBeenRedeemed = () => {\n                if (!studentHasBadge) return;\n                if (student.badges[index].redeemed) return true;\n                return false;\n            }\n            const redeemBadge = async () => {\n                if (badgeHasBeenRedeemed()) return;\n                badgesRef.current[badge._id].classList.add('redeemed');\n                const response = await fetch(`/student/${student._id}/badge/redeemed`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        badgeId: badge._id,\n                        badgeValue: badge.value\n                    })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                props.refreshData();\n            }\n            if (studentHasBadge) return (\n                <div\n                  key={`badgeList-${badge._id}`}\n                  ref={(el) => badgesRef.current[badge._id] = el}\n                  className={`badgeItem${badgeHasBeenRedeemed() ? ' redeemed' : ''}`}>\n                    <img\n                        className=\"badgeImage\"\n                        alt={badge.name}\n                        src={badge.src} />\n                    <span className=\"badgeName\">{badge.name}</span>\n                    <span onClick={redeemBadge}>\n                        <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"badgeValue\">{badge.value}</span>\n                    </span>\n                </div>\n            );\n        });\n    }\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentBadges\">\n                <h1>My Badges</h1>\n                <div className=\"BadgeList\">\n                    {generateBadgeList()}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["114","115"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport ViewStudent from './ViewStudent';\nimport Marketplace, { AddOrEditWearable } from './Marketplace';\nimport Loading from './Loading';\nimport ContextMenu from './ContextMenu';\nimport { shrinkit } from '../utils';\nimport MyAccount from './MyAccount';\nimport Dropdown from './Dropdown';\n\nexport default function Teacher(props) {\n    const { teacher } = props;\n    const [view, setView] = useState({ type: 'home' });\n    const [students, setStudents] = useState([]);\n    const [wearables, setWearables] = useState([]);\n    const [badges, setBadges] = useState([]);\n    const getTeacherData = async () => {\n        const response = await fetch(`/teacher/${teacher._id}`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        setStudents(body.students);\n        setWearables(body.wearables);\n        setBadges(body.badges);\n        if (view.type === 'student') {\n            const refreshCurrentStudent = (prevView) => {\n                let thisStudent = prevView.data;\n                let index = body.students.findIndex(student => student._id === thisStudent._id);\n                return body.students[index];\n            }\n            setView(prevView => ({\n                type: 'student',\n                data: refreshCurrentStudent(prevView)\n            }));\n        }\n    }\n    useEffect(() => {\n        getTeacherData();\n    }, [teacher._id]);\n    const generateStudentList = () => {\n        if (!students.length) return 'No students yet!';\n        const makeSureNameFits = (string) => {\n            if (string.length < 18) return string;\n            let shortenedString = string.substring(0, 17);\n            return shortenedString + '...';\n        }\n        const studentList = students.map(student => ({\n            value: student._id,\n            display: makeSureNameFits(student.firstName + ' ' + student.lastName)\n        }));\n        return (\n            <Dropdown\n                style={{ minWidth: '14rem' }}\n                restoreDefault={view.type !== 'student'}\n                defaultValue={{ value: null, display: 'Select one...' }}\n                listItems={studentList}\n                onChange={(_id) => setView({ type: 'student', data: students[students.findIndex(student => student._id === _id)] })}\n            />\n        );\n    }\n    const state = {\n        view,\n        students,\n        wearables,\n        badges,\n        updateView: setView,\n        refreshData: getTeacherData\n    }\n    return (\n        <Dashboard teacher={true}>\n            <Header>\n                <Nav>\n                    <button onClick={() => setView({ type: 'home' })}>Home</button>\n                    <button onClick={() => setView({ type: 'marketplace' })}>Marketplace</button>\n                    <button onClick={() => setView({ type: 'badges' })}>Badges</button>\n                </Nav>\n                <TeacherProfileDropdown {...props} {...state} />\n            </Header>\n            <Sidebar>\n                <h2>Students</h2>\n                {generateStudentList()}\n                <hr />\n                <div className=\"teacherCode\">\n                    Teacher code:<br />\n                    <b style={{ fontSize: '0.8rem' }}>{teacher._id}</b>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction TeacherProfileDropdown(props) {\n    const { teacher } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <div className={`User${expanded ? ' expanded' : ''}`}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{teacher.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={teacher.profilePic ? teacher.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              children={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView({ type: 'account' })}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView({ type: 'settings' })}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </div>\n    )\n}\n\nfunction Main(props) {\n    const { view, teacher } = props;\n    switch (view.type) {\n        case 'home': return <Home {...props} />;\n        case 'student': return <ViewStudent {...props} student={view.data} />;\n        case 'marketplace': return <TeacherMarketplace {...props} />;\n        case 'badges': return <TeacherBadges {...props} />;\n        case 'account': return <MyAccount {...props} userType=\"teacher\" user={teacher} />;\n        case 'settings': return <Settings {...props} />;\n        default: return <Home {...props} />;\n    }\n}\n\nfunction Home() {\n    return (\n        <div className=\"Main padme\">\n            <h1>Dashboard</h1>\n            <ul>\n                <li>View student dashboard</li>\n                <ul>\n                    <li>Add homework</li>\n                    <li>Log assignment progress</li>\n                    <li>Give coins</li>\n                    <li>Award badges</li>\n                </ul>\n                <li>General - apply to all students</li>\n                <ul>\n                    <li>Add/edit/delete badges</li>\n                    <li>Add/edit/delete closet items</li>\n                </ul>\n            </ul>\n        </div>\n    );\n}\n\nfunction TeacherMarketplace(props) {\n    const { teacher, modal } = props;\n    const [wearableModal, setWearableModal] = useState(false);\n    useEffect(() => {\n        if (!modal) setWearableModal(false);\n    }, [modal]);\n    useEffect(() => {\n        if (wearableModal) addNewWearable();\n    }, [teacher]);\n    const addNewWearable = () => {\n        props.updateModal(<AddOrEditWearable {...props} />);\n        setWearableModal(true);\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Marketplace</h1>\n            <Marketplace {...props} viewingAsTeacher={true} />\n            <button onClick={addNewWearable}>Add new wearable</button>\n        </div>\n    );\n}\n\nfunction TeacherBadges(props) {\n    const addNewBadge = () => {\n        props.updateModal(<AddOrEditBadge {...props} />)\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Badges</h1>\n            <Badges {...props} />\n            <button onClick={addNewBadge}>Add new badge</button>\n        </div>\n    )\n}\n\nfunction Badges(props) {\n    const { badges } = props;\n    const badgesRef = useRef({});\n    const awardBadge = (_id) => {\n        const index = badges.findIndex(badge => badge._id === _id);\n        const thisBadge = badges[index];\n        props.updateModal(<AwardBadge {...props} badge={thisBadge} />);\n    }\n    const editOrDeleteBadge = (e, _id) => {\n        e.preventDefault();\n        const index = badges.findIndex(badge => badge._id === _id);\n        const thisBadge = badges[index];\n        const editBadge = () => props.updateModal(<AddOrEditBadge {...props} badge={thisBadge} />);\n        const deleteBadge = () => {\n            const handleDelete = async () => {\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/badge/${_id}`, { method: 'DELETE' });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                shrinkit(badgesRef.current[_id], true);\n                props.refreshTeacher();\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Are you sure?</h2>\n                    <img alt={thisBadge.name} src={thisBadge.src} style={{ float: 'right' }} />\n                    Are you sure you want to delete the badge \"{thisBadge.name}\"? This action cannot be undone.\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ?   <Loading />\n                            :   <form onSubmit={handleDelete}>\n                                    <button type=\"submit\">Yes, I'm sure</button>\n                                    <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                </form>\n                            }\n                    </div>\n                </div>\n            )\n            props.updateModal(content());\n        }\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={editBadge}>Edit</button></li>\n                <li><button onClick={deleteBadge}>Delete</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const generateBadgeList = () => {\n        return badges.map(badge => (\n            <div\n              key={`badgeList-${badge._id}`}\n              ref={(el) => badgesRef.current[badge._id] = el}\n              className=\"badgeItem\">\n                <img\n                  alt={badge.name}\n                  src={badge.src}\n                  className=\"badgeImage\"\n                  onClick={() => awardBadge(badge._id)}\n                  onContextMenu={(e) => editOrDeleteBadge(e, badge._id)} />\n                <span className=\"badgeName\">{badge.name}</span>\n                <span>\n                    <img alt=\"coin icon\" className=\"coin\" src=\"assets/Coin_ico.png\" />\n                    <span className=\"badgeValue\">{badge.value}</span>\n                </span>\n            </div>\n        ));\n    }\n    return (\n        <div className=\"BadgeList\">\n            {generateBadgeList()}\n        </div>\n    )\n}\n\nfunction AwardBadge(props) {\n    const { students, badge } = props;\n    const [recipient, setRecipient] = useState(null); // student id\n    const [error, setError] = useState(false);\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const makeSureNameFits = (string) => {\n        if (string.length < 18) return string;\n        let shortenedString = string.substring(0, 17);\n        return shortenedString + '...';\n    }\n    const studentList = students.map(student => ({\n        value: student._id,\n        display: makeSureNameFits(student.firstName + ' ' + student.lastName)\n    }));\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!recipient) return setError('Please select a student!');\n        setLoadingIcon(true);\n        const response = await fetch(`/student/${recipient}/badges`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ badgeId: badge._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) {\n            setLoadingIcon(false);\n            return setError(body.error);\n        }\n        props.updateModal(false);\n        props.refreshData();\n    }\n    const updateRecipient = (_id) => {\n        setError(false);\n        setRecipient(_id);\n    }\n    return (\n        <div className=\"modalBox\">\n            <h2>Award this badge</h2>\n            <p>Choose a student to award this badge to:</p>\n            <div style={{ textAlign: 'center' }}>\n                <Dropdown\n                    style={{ minWidth: '15rem', marginBottom: '0.2rem' }}\n                    defaultValue={{ value: null, display: 'Select one...' }}\n                    listItems={studentList}\n                    onChange={updateRecipient}/>\n                {error && <span className=\"error\">{error}</span>}\n            </div>\n            <form onSubmit={handleSubmit} className=\"buttons\">\n                {loadingIcon\n                    ? <Loading />\n                    : <input type=\"submit\" />\n                }\n            </form>\n        </div>\n    )\n}\n\nfunction AddOrEditBadge(props) {\n    const { teacher, badge } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        _id: badge ? badge._id : '',\n        teacherCode: badge ? badge.teacherCode : teacher._id,\n        name: badge ? badge.name : '',\n        src: badge ? badge.src : '',\n        value: badge ? badge.value : ''\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        const ROUTE = badge ? `/badge/${badge._id}` : '/badge';\n        const response = await fetch(ROUTE, {\n            method: badge ? 'PUT' : 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.updateModal(false);\n        props.refreshData();\n    }\n    return (\n        <div className=\"modalBox\">\n            <form className=\"pad\" onSubmit={handleSubmit}>\n                <h2>{badge ? 'Edit this' : 'Add new'} badge</h2>\n                <label htmlFor=\"name\">Badge name:</label>\n                <input type=\"text\" defaultValue={badge ? badge.name : ''} onChange={(e) => updateFormData('name', e.target.value)} />\n                <label htmlFor=\"src\">Image link:</label>\n                <input type=\"text\" defaultValue={badge ? badge.src : ''} onChange={(e) => updateFormData('src', e.target.value)} />\n                <label htmlFor=\"value\">Badge value:</label>\n                <input type=\"text\" defaultValue={badge ? badge.value : ''} onChange={(e) => updateFormData('value', e.target.value)} />\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction Settings(props) {\n    return (\n        <div className=\"Main\">\n            <h1>Settings</h1>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["116","117","118"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["119"],"import { useState, useEffect, useRef } from 'react';\nimport Loading from './Loading';\nimport Avatar from './Avatar';\nimport { prettifyDate } from '../utils';\nimport dayjs from 'dayjs';\nimport ContextMenu from './ContextMenu';\n\nexport default function ViewStudent(props) {\n    const { student, wearables } = props;\n    const [homework, setHomework] = useState([]);\n    const [avatar, setAvatar] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const state = { homework }\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n        setIsLoaded(true);\n    }\n    useEffect(() => {\n        setIsLoaded(false);\n        getHomework();\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, name, src, image } = wearables[index];\n            obj[category] = { _id, name, src, image };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student._id]);\n    const addNewHomework = () => {\n        let content = (\n            <div className=\"modalBox\">\n                <h2>{`Add homework for ${student.firstName}`}</h2>\n                <AddHomeworkForm {...props} {...state} refreshHomework={getHomework} />\n            </div>\n        )\n        props.updateModal(content);\n    }\n    if (!student) return;\n    if (!isLoaded) return <Loading />;\n    return (\n        <div className=\"Main\">\n            <div className=\"ViewStudent\">\n                <div className=\"viewStudentMain\">\n                    <div className=\"viewStudentHeader\">\n                        <h1>{student.firstName}'s Homework Progress</h1>\n                        <button className=\"stealth\" onClick={addNewHomework}><i className=\"fas fa-plus-circle\"></i></button>\n                    </div>\n                    <ViewHomework {...props} {...state} refreshHomework={getHomework} />\n                </div>\n                <div className=\"viewStudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} avatar={avatar} viewingAsTeacher={true} />\n                    </div>\n                    <StudentCoins {...props} />\n                    <div className=\"StudentStats\">\n                        <img className=\"statsIcon\" alt=\"badge icon\" src=\"assets/Badge_ico.svg\" />\n                        <span className=\"statsLabel\">{student.badges.length}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction StudentCoins(props) {\n    const { student } = props;\n    const [coinsCount, setCoinsCount] = useState(student.coins);\n    const [makingChanges, setMakingChanges] = useState(false);\n    useEffect(() => {\n        setMakingChanges(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [student._id]);\n    useEffect(() => {\n        setCoinsCount(student.coins);\n    }, [student.coins]);\n    const handleUpdateCoins = async () => {\n        const response = await fetch(`/student/${student._id}/coins`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                coins: coinsCount\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success=true message from server');\n        setMakingChanges(false);\n        props.refreshData();\n    }\n    const editCoinsButtons = () => {\n        return (\n            <div>\n                <button className=\"stealth link\" onClick={() => addCoins(-10)}><i className=\"fas fa-minus-circle\"></i></button>\n                <button className=\"stealth link\" onClick={() => addCoins(10)}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        )\n    }\n    const addCoins = (amount) => {\n        setCoinsCount(coinsCount + amount);\n    }\n    const formatCoins = (number) => number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    return (\n        <div className=\"StudentStats\">\n            <img className=\"statsIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n            <span className=\"statsLabel\">{formatCoins(coinsCount)}</span>\n            <div className=\"editCoinsButton\">\n                {makingChanges ? editCoinsButtons() : <button className=\"stealth link\" onClick={() => setMakingChanges(true)}>Edit</button>}\n            </div>\n            {makingChanges && <div className=\"confirmChangesButton\">\n                <button className=\"secondary\" onClick={() => handleUpdateCoins(student._id)}>Save</button>\n                <button className=\"secondary greyed\" onClick={() => {\n                    setMakingChanges(false);\n                    setCoinsCount(student.coins);\n                }}>Cancel</button>\n            </div>}\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { homework } = props;\n    const viewHomework = () => {\n        if (!homework.length) return 'No homework exists for this student';\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...props} key={homework[i]._id} {...homework[i]} />)\n        }\n        return homeworkModules;\n    }\n    return (\n        <div className=\"ViewHomework\">\n            {viewHomework()}\n        </div>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const [showingMenu, updateShowingMenu] = useState(false);\n    const toggleMenu = () => {\n        updateShowingMenu(prevState => !prevState);\n    }\n    const showMenu = () => {\n        return (\n            <ContextMenu\n              position={null}\n              updateContextMenu={() => updateShowingMenu(false)}>\n                <ul className=\"editDelete\">\n                    <li><button onClick={editHomework}>Edit</button></li>\n                    <li><button onClick={confirmDeleteHomework}>Delete</button></li>\n                </ul>\n            </ContextMenu>\n        );\n    }\n    const editHomework = () => {\n        updateShowingMenu(false);\n        props.updateModal(<EditHomeworkForm {...props} />);\n    }\n    const confirmDeleteHomework = () => {\n        updateShowingMenu(false);\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>Are you sure you want to proceed?</h2>\n                This cannot be undone.\n                {options.loadingIcon\n                    ?   <Loading />\n                    :   <div className=\"buttons\">\n                            <button onClick={handleDeleteHomework}>Yes, I'm sure</button>\n                            <button className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                        </div>\n                    }\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const handleDeleteHomework = async () => {\n        const response = await fetch(`/student/homework/${_id}`, { method: 'DELETE' });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const homeworkAssignments = () => {\n        const assignmentsList = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsList.push(<Assignment {...props} homeworkId={_id} key={assignments[i]._id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsList;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"homeworkHeader\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n                <div className=\"options\">\n                    <button className=\"stealth\" onClick={toggleMenu}><i className=\"fas fa-bars\"></i></button>\n                    {showingMenu && showMenu()}\n                </div>\n            </div>\n            <div className=\"homeworkBody\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { student, homeworkId } = props;\n    const coinsNumber = useRef(null);\n    const addCoins = async (index, recorded = true) => {\n        if (props.recorded) return;\n        const response = await fetch(`/assignment/${homeworkId}/recorded`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                recorded\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        const updateCoins = async () => {\n            let coinsCount = parseInt(coinsNumber.current.innerHTML);\n            coinsCount += student.coins;\n            const response = await fetch(`/student/${student._id}/coins`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    coins: coinsCount\n                })\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no { success: true } message from server');\n            console.log('success!!!!!');\n            props.refreshData();\n            props.refreshHomework();\n        }\n        updateCoins();\n    }\n    const updateHomeworkProgress = async (index, value) => {\n        const response = await fetch(`/student/homework/assignment/${homeworkId}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <input type=\"range\"\n                    min=\"0\" max=\"4\"\n                    defaultValue={props.progress.toString()}\n                    onChange={(e) => updateHomeworkProgress(props.index, e.target.value)}\n                    disabled={props.recorded ? true : false} />\n                {(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`} onClick={() => addCoins(props.index)}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span ref={coinsNumber}>{`${props.progress * 20}`}</span>\n                    </div>}\n            </div>\n        </li>\n    )\n}\n\nfunction AddHomeworkForm(props) {\n    const { student } = props;\n    const [formData, updateFormData] = useState({\n        date: dayjs().format('YYYY-MM-DD'),\n        headline: '',\n        assignments: [{}, {}, {}, {}]\n    });\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/${student._id}/homework`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshData();\n        props.refreshHomework();\n    }\n    const handleAddAssignment = (index, label) => {\n        let { assignments } = formData;\n        let item = assignments[index];\n        item = { label: label, progress: 0 }\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    const today = () => {\n        return dayjs().format('YYYY-MM-DD');\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleSubmit} autoComplete=\"off\">\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={today()} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" onChange={(e) => handleAddAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" onChange={(e) => handleAddAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" onChange={(e) => handleAddAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" onChange={(e) => handleAddAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}\n\nfunction EditHomeworkForm(props) {\n    const { _id, date, headline, assignments } = props;\n    const [formData, updateFormData] = useState({ _id, date, headline, assignments });\n    const handleEditHomework = async (e) => {\n        e.preventDefault();\n        const response = await fetch(`/student/homework/${_id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.updateModal(false);\n        props.refreshHomework();\n    }\n    const handleEditAssignment = (index, label) => {\n        let item = assignments[index];\n        item.label = label;\n        assignments[index] = item;\n        updateFormData({ ...formData, assignments });\n    }\n    return (\n        <form className=\"addHomeworkForm\" onSubmit={handleEditHomework} autoComplete=\"off\">\n            <h2>Edit homework for {prettifyDate(date)}</h2>\n            <div className=\"addHomework\">\n                <div className=\"addHomeworkDate\">\n                    <label htmlFor=\"date\">Date:</label>\n                    <input type=\"date\" defaultValue={date.split('T')[0]} onChange={(e) => updateFormData({ ...formData, date: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkHeadline\">\n                    <label htmlFor=\"headline\">Headline:</label>\n                    <input type=\"text\" defaultValue={headline} onChange={(e) => updateFormData({ ...formData, headline: e.target.value })} />\n                </div>\n                <div className=\"addHomeworkAssignments\">\n                    <label htmlFor=\"assignments\">Assignments:</label>\n                    <li><span className=\"numBubble\">1.</span><input type=\"text\" defaultValue={assignments[0].label} onChange={(e) => handleEditAssignment(0, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">2.</span><input type=\"text\" defaultValue={assignments[1].label} onChange={(e) => handleEditAssignment(1, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">3.</span><input type=\"text\" defaultValue={assignments[2].label} onChange={(e) => handleEditAssignment(2, e.target.value)} /></li>\n                    <li><span className=\"numBubble\">4.</span><input type=\"text\" defaultValue={assignments[3].label} onChange={(e) => handleEditAssignment(3, e.target.value)} /></li>\n                </div>\n            </div>\n            <input type=\"Submit\" />\n        </form>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",["120"],"import { useEffect } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function ContextMenu(props) {\n    useEffect(() => {\n        const closeContextMenu = (e) => {\n            if (props.ignoreClick) { // will be an array like ['.Modal', '#menu li']\n                for (let selector of props.ignoreClick) {\n                    if (elementHasParent(e.target, selector)) return;\n                }\n            }\n            props.updateContextMenu(false);\n        }\n        window.addEventListener('click', closeContextMenu);\n        return () => window.removeEventListener('click', closeContextMenu);\n    }, []);\n    return (\n        <div className=\"ContextMenu\" style={props.position}>\n            {props.children}\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["121","122"],"import { useEffect, useRef, useState } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function Dropdown(props) {\n    const { defaultValue, listItems, restoreDefault } = props;\n    const [display, setDisplay] = useState(() => {\n        if (!listItems || !listItems.length) return 'Add new...';\n        if (!defaultValue) return 'Select one';\n        return defaultValue.display;\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [addingNew, setAddingNew] = useState(false);\n    const dropdownList = useRef(null);\n    useEffect(() => {\n        const closeDropdown = (e) => {\n            if (elementHasParent(e.target, '.dropdownDisplay')) return;\n            if (elementHasParent(e.target, '.addNew')) return;\n            setIsOpen(false);\n        }\n        window.addEventListener('click', closeDropdown);\n        return () => window.removeEventListener('click', closeDropdown);\n    }, []);\n    useEffect(() => {\n        if (!dropdownList || !dropdownList.current) return;\n        if (isOpen) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px'; // plus 1px to account for 1px bottom border\n        else {\n            dropdownList.current.style.maxHeight = '0px';\n            setAddingNew(false); // unrelated to maxHeight adjustment thing\n        }\n    }, [isOpen]);\n    useEffect(() => {\n        if (addingNew) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px';\n    }, [addingNew]);\n    useEffect(() => {\n        if (restoreDefault) setDisplay(defaultValue.display);\n    }, [restoreDefault]);\n    const toggleIsOpen = () => setIsOpen(prevState => !prevState);\n    const handleClick = (e) => {\n        setDisplay(e.target.innerHTML);\n        props.onChange(e.target.getAttribute('data-value'));\n    }\n    const generateList = () => {\n        const buttonForAddNew =\n            <AddNew {...props}\n                key=\"dropdownItem-addNew\"\n                addingNew={addingNew}\n                updateAddingNew={setAddingNew}\n                updateIsOpen={setIsOpen}\n                updateDisplay={setDisplay}\n            />;\n        if ((!listItems || !listItems.length) && props.addNew) {\n            console.table(listItems);\n            return buttonForAddNew;\n        }\n        const array = [];\n        for (let item of listItems) {\n            array.push(\n                <li className=\"dropdownItem\" key={`dropdownItem-${item.value}`}>\n                    <button type=\"button\" data-value={item.value} onClick={handleClick}>{item.display}</button>\n                </li>\n            );\n        }\n        if (props.addNew) array.push(buttonForAddNew);\n        return array;\n    }\n    return (\n        <div className={`Dropdown${isOpen ? ' expanded' : ''}`} style={props.style}>\n            <div className=\"dropdownDisplay\" onClick={toggleIsOpen}>{display}</div>\n            <ul className=\"dropdownList\" ref={dropdownList}>{generateList()}</ul>\n        </div>\n    );\n}\n\nfunction AddNew(props) {\n    const { addingNew } = props;\n    const [inputValue, setInputValue] = useState(null);\n    const inputRef = useRef(null);\n    useEffect(() => {\n        if (!addingNew) return setInputValue(null);\n        inputRef.current.focus();\n        const handleKeydown = (e) => {\n            if (e.key === 'Escape') return props.updateAddingNew(false);\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                props.addNew(inputRef.current.value);\n                props.updateDisplay(inputRef.current.value);\n                props.onChange(inputRef.current.value);\n                props.updateIsOpen(false);\n                return;\n            }\n        }\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [addingNew]);\n    return (\n        <li className=\"dropdownItem\">\n            {addingNew\n                ?   <button type=\"button\" className=\"addNew active\">\n                        <input\n                            ref={inputRef}\n                            type=\"text\"\n                            defaultValue={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                        />\n                        <span className=\"inputHint\">Press Enter to submit, Esc to cancel.</span>\n                    </button>\n                :   <button type=\"button\" className=\"addNew\" onClick={() => props.updateAddingNew(true)}>\n                        {props.buttonContent || 'Add new...'}\n                    </button>\n                }\n        </li>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",["123"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",["124","125"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/PianopetBase.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/ntc.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Splat.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"126","replacedBy":"130"},{"ruleId":"128","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":5,"column":19,"nodeType":"134","messageId":"135","endLine":5,"endColumn":31},{"ruleId":"126","replacedBy":"136"},{"ruleId":"128","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":24,"column":8,"nodeType":"140","endLine":24,"endColumn":30,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":119,"column":8,"nodeType":"140","endLine":119,"endColumn":10,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":270,"column":33,"nodeType":"146","messageId":"147","endLine":270,"endColumn":35},{"ruleId":"138","severity":1,"message":"148","line":39,"column":8,"nodeType":"140","endLine":39,"endColumn":21,"suggestions":"149"},{"ruleId":"138","severity":1,"message":"150","line":164,"column":8,"nodeType":"140","endLine":164,"endColumn":17,"suggestions":"151"},{"ruleId":"152","severity":1,"message":"153","line":242,"column":25,"nodeType":"154","endLine":247,"endColumn":27},{"ruleId":"138","severity":1,"message":"155","line":569,"column":8,"nodeType":"140","endLine":569,"endColumn":10,"suggestions":"156"},{"ruleId":"138","severity":1,"message":"157","line":601,"column":8,"nodeType":"140","endLine":601,"endColumn":21,"suggestions":"158"},{"ruleId":"138","severity":1,"message":"159","line":33,"column":8,"nodeType":"140","endLine":33,"endColumn":21,"suggestions":"160"},{"ruleId":"138","severity":1,"message":"161","line":16,"column":8,"nodeType":"140","endLine":16,"endColumn":10,"suggestions":"162"},{"ruleId":"138","severity":1,"message":"163","line":36,"column":8,"nodeType":"140","endLine":36,"endColumn":24,"suggestions":"164"},{"ruleId":"138","severity":1,"message":"161","line":94,"column":8,"nodeType":"140","endLine":94,"endColumn":19,"suggestions":"165"},{"ruleId":"144","severity":1,"message":"166","line":18,"column":34,"nodeType":"167","messageId":"168","endLine":18,"endColumn":41},{"ruleId":"144","severity":1,"message":"145","line":11,"column":60,"nodeType":"146","messageId":"147","endLine":11,"endColumn":62},{"ruleId":"144","severity":1,"message":"145","line":43,"column":46,"nodeType":"146","messageId":"147","endLine":43,"endColumn":48},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],["169"],["170"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["169"],["170"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wearables'. Either include it or remove the dependency array.","ArrayExpression",["171"],"React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["172"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["173"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["174"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'image.x' and 'image.y'. Either include them or remove the dependency array.",["175"],"React Hook useEffect has missing dependencies: 'elementPosition.x', 'elementPosition.y', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["176"],"React Hook useEffect has missing dependencies: 'getHomework', 'student.avatar', and 'wearables'. Either include them or remove the dependency array.",["177"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["178"],"React Hook useEffect has a missing dependency: 'defaultValue.display'. Either include it or remove the dependency array.",["179"],["180"],"Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},"Update the dependencies array to be: [student.avatar, view, wearables]",{"range":"201","text":"202"},"Update the dependencies array to be: [getHomework]",{"range":"203","text":"204"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"205","text":"206"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"207","text":"208"},"Update the dependencies array to be: [image.x, image.y]",{"range":"209","text":"210"},"Update the dependencies array to be: [elementPosition.x, elementPosition.y, mouseIsDown, props]",{"range":"211","text":"212"},"Update the dependencies array to be: [getHomework, student._id, student.avatar, wearables]",{"range":"213","text":"214"},"Update the dependencies array to be: [props]",{"range":"215","text":"216"},"Update the dependencies array to be: [defaultValue.display, restoreDefault]",{"range":"217","text":"218"},"Update the dependencies array to be: [addingNew, props]",{"range":"219","text":"220"},[1097,1119],"[student.avatar, view, wearables]",[5374,5376],"[getHomework]",[1597,1610],"[getTeacherData, teacher._id]",[6311,6320],"[addNewWearable, teacher, wearableModal]",[25400,25402],"[image.x, image.y]",[26684,26697],"[elementPosition.x, elementPosition.y, mouseIsDown, props]",[1480,1493],"[getHomework, student._id, student.avatar, wearables]",[632,634],"[props]",[1586,1602],"[defaultValue.display, restoreDefault]",[3829,3840],"[addingNew, props]"]