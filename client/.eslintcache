[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14"},{"size":500,"mtime":1607403407622,"results":"15","hashOfConfig":"16"},{"size":1544,"mtime":1612597994082,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1607403407623,"results":"18","hashOfConfig":"16"},{"size":861,"mtime":1612426425775,"results":"19","hashOfConfig":"16"},{"size":97,"mtime":1607733049448,"results":"20","hashOfConfig":"16"},{"size":350,"mtime":1612769253615,"results":"21","hashOfConfig":"16"},{"size":8975,"mtime":1612233906671,"results":"22","hashOfConfig":"16"},{"size":234,"mtime":1612233939058,"results":"23","hashOfConfig":"16"},{"size":684,"mtime":1612233978520,"results":"24","hashOfConfig":"16"},{"size":965,"mtime":1612233987275,"results":"25","hashOfConfig":"16"},{"size":7204,"mtime":1612236691840,"results":"26","hashOfConfig":"16"},{"size":7460,"mtime":1612769652298,"results":"27","hashOfConfig":"16"},{"size":2453,"mtime":1612679889327,"results":"28","hashOfConfig":"16"},{"size":16860,"mtime":1612770086776,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"sahw5t",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["63","64"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["65","66"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["67"],"import React, { useState, useEffect, useContext } from 'react';\nimport { prettifyDate } from '../utils';\nimport Loading from './Loading';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard'\n\nconst StudentContext = React.createContext();\nconst HomeworkContext = React.createContext();\n\nfunction Student(props) {\n    const [view, setView] = useState('home');\n    const [student, setStudent] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const fetchStudentData = () => {\n        fetch('/auth')\n            .then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                setStudent(body.student);\n                setIsLoaded(true);\n            });\n    }\n    useEffect(() => {\n        fetchStudentData();\n    }, []);\n    if (!isLoaded) return (\n        <Dashboard>\n            <Loading />\n        </Dashboard>\n    )\n    return (\n        <StudentContext.Provider value={fetchStudentData}>\n            <Dashboard teacher={false}>\n                <Header>\n                    {student.firstName}\n                </Header>\n                <Sidebar>\n                    <div className=\"StudentSidebar\">\n                        <div className=\"avatarContainer\">\n                            <img alt=\"student avatar\" className=\"studentAvatar\" src=\"https://lh3.googleusercontent.com/ImpxcbOUkhCIrWcHgHIDHmmvuFznNSGn2y1mor_hLqpYjI6Q1J7XAVvpR-I24ZOJL3s\" />\n                        </div>\n                        <div className=\"studentCoins\">\n                            <div className=\"coinsIcon\"><img alt=\"coin icon\" src=\"assets/Coin_ico.png\" /></div>\n                            <span className=\"coinsCount\">{student.coins.toString()}</span>\n                        </div>\n                    </div>\n                </Sidebar>\n                <Main view={view} student={student} />\n                <Nav>\n                    <button className=\"stealth link\" onClick={() => setView('home')}>Homework</button>\n                    <button className=\"stealth link\" onClick={() => setView('marketplace')}>Marketplace</button>\n                    <button className=\"stealth link\" onClick={() => setView('badges')}>Badges</button>\n                    <button className=\"stealth link\" onClick={props.logout}>Log out</button>\n                </Nav>\n            </Dashboard>\n        </StudentContext.Provider>\n    )\n}\n\nfunction Main(props) {\n    const { view, student } = props;\n    switch (view) {\n        case 'home': return <Home student={student} />;\n        default: return <Home student={student} />;\n    }\n}\n\nfunction Home(props) {\n    return (\n        <div className=\"Main\">\n            <ViewHomework student={props.student} />\n        </div>\n    )\n}\n\nfunction ViewHomework(props) {\n    const { student } = props;\n    const [homework, updateHomework] = useState(null);\n    const fetchHomework = () => {\n        fetch('/get/homework', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ studentId: student._id })\n        }).then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                updateHomework(body.homework);\n            });\n    }\n    useEffect(fetchHomework, []);\n    const viewHomework = () => {\n        const homeworkModules = [];\n        for (let i = 0; i < homework.length; i++) {\n            homeworkModules.push(<Homework {...homework[i]} />);\n        }\n        return homeworkModules;\n    }\n    return (\n        <HomeworkContext.Provider value={fetchHomework}>\n            <div className=\"ViewHomework\">\n                {homework ? viewHomework() : '...'}\n            </div>\n        </HomeworkContext.Provider>\n    )\n}\n\nfunction Homework(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        const assignmentsArray = [];\n        for (let i = 0; i < assignments.length; i++) {\n            assignmentsArray.push(<Assignment homeworkId={_id} index={i} {...assignments[i]} />);\n        }\n        return assignmentsArray;\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    )\n}\n\nfunction Assignment(props) {\n    const { homeworkId } = props;\n    const fetchHomework = useContext(HomeworkContext);\n    const updateHomeworkProgress = (value) => {\n        fetch('/update/progress', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ _id: homeworkId, index: props.index, value })\n        }).then(response => response.json())\n            .then(body => {\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no { success: true } response from server');\n                fetchHomework();\n                // refresh hw data\n            });\n    }\n    return (\n        <li>\n            <div className=\"label\">{props.label}</div>\n            <div className=\"progress\">\n                <button onClick={props.progress === 0 ? () => {} : () => updateHomeworkProgress(props.progress - 1)}\n                    className={`stealth${props.progress === 0 ? ' disabled' : ''}`}\n                    style={{ visibility: props.recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                <ProgressBar percentage={(100 * props.progress) / 4} />\n                <button onClick={props.progress === 4 ? () => {} : () => updateHomeworkProgress(props.progress + 1)}\n                    className={`stealth${props.progress === 4 ? ' disabled' : ''}`}\n                    style={{ visibility: props.recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n                {/*(props.progress > 0) &&\n                    <div className={`coinsEarned${props.recorded ? ' coinsAdded' : ''}`}>\n                        <img className=\"coinIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span>{`${props.progress * 20}`}</span>\n                    </div>*/}\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: props.percentage+'%' }}></div>\n        </div>\n    )\n}\n\nexport default Student;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["68"],"import { useState, useEffect } from 'react';\nimport { Dashboard, Header, Sidebar } from './Dashboard';\nimport ViewStudent from './ViewStudent';\nimport Loading from './Loading';\nimport Modal from './Modal';\nimport Marketplace from './Marketplace';\nimport { getArrayIndexByKeyValue } from '../utils';\n\nexport default function Teacher(props) {\n    const { teacher } = props;\n    const [view, setView] = useState({ type: 'home' });\n    const [students, setStudents] = useState([]);\n    const [wearables, setWearables] = useState([]);\n    const [modal, setModal] = useState(false);\n    const getTeacherData = async () => {\n        console.log('refreshed teacher data');\n        const response = await fetch('/teacher/data', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ _id: teacher._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        setStudents(body.students);\n        setWearables(body.wearables);\n        if (view.type === 'student') {\n            const refreshThisStudent = (prevView) => {\n                console.log('refreshing student');\n                let thisStudent = prevView.data;\n                let index = getArrayIndexByKeyValue('_id', thisStudent._id, students);\n                return students[index];\n            }\n            setView(prevView => ({\n                type: 'student',\n                data: refreshThisStudent(prevView)\n            }));\n        }\n    }\n    const state = {\n        view,\n        students,\n        wearables,\n        modal,\n        updateModal: setModal,\n        refreshData: getTeacherData\n    }\n    useEffect(() => {\n        getTeacherData();\n    }, [teacher._id]);\n    const generateStudentList = () => {\n        if (!students.length) return 'No students yet!';\n        const studentList = [];\n        for (let i = 0; i < students.length; i++) {\n            studentList.push(\n                <li key={students[i]._id}><button className=\"stealth link\" onClick={() => setView({ type: 'student', data: students[i] })}>{students[i].firstName} {students[i].lastName}</button></li>\n            );\n        }\n        return <ul className=\"stealth\">{studentList}</ul>;\n    }\n    return (\n        <Dashboard teacher={true}>\n            {modal && <Modal exit={() => setModal(false)} children={modal} />}\n            <Header>\n                {teacher.username}\n            </Header>\n            <Sidebar>\n                <h2>Students</h2>\n                {generateStudentList()}\n                <hr />\n                <h2>Control Panel</h2>\n                <ul className=\"stealth\">\n                    <li><button onClick={() => setView({ type: 'marketplace' })} className=\"stealth link\">Marketplace</button></li>\n                    <li><button onClick={() => setView({ type: 'badges' })} className=\"stealth link\">Badges</button></li>\n                </ul>\n                <hr />\n                <div className=\"teacherCode\">\n                    Teacher code:<br />\n                    <b style={{ fontSize: '0.8rem' }}>{teacher._id}</b>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction Main(props) {\n    const { view } = props;\n    switch (view.type) {\n        case 'home': return <Home {...props} />;\n        case 'student': return <ViewStudent {...props} student={view.data} />;\n        case 'marketplace': return <TeacherMarketplace {...props} />;\n        case 'badges': return <TeacherBadges {...props} />;\n        default: return <Home {...props} />;\n    }\n}\n\nfunction Home() {\n    return (\n        <div className=\"Main padme\">\n            <h1>Dashboard</h1>\n            <ul>\n                <li>View student dashboard</li>\n                <ul>\n                    <li>Add homework</li>\n                    <li>Log assignment progress</li>\n                    <li>Give coins</li>\n                    <li>Award badges</li>\n                </ul>\n                <li>General - apply to all students</li>\n                <ul>\n                    <li>Add/edit/delete badges</li>\n                    <li>Add/edit/delete closet items</li>\n                </ul>\n            </ul>\n        </div>\n    );\n}\n\nfunction TeacherMarketplace(props) {\n    const addNewWearable = () => {\n        props.updateModal(<AddNewWearable {...props} />)\n    }\n    return (\n        <div className=\"Main\">\n            marketplace!\n            <Marketplace {...props} />\n            <ul>\n                <li>add new wearables</li>\n                <li>edit/delete existing wearables</li>\n            </ul>\n            <button onClick={addNewWearable}>Add new wearable</button>\n        </div>\n    )\n}\n\nfunction AddNewWearable(props) {\n    const { teacher } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        teacherCode: teacher._id,\n        name: '',\n        category: 'head',\n        src: '',\n        value: ''\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const handleAddWearable = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        console.table(formData);\n        const response = await fetch('/add/wearable', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        console.table(formData);\n        props.updateModal(false); // */\n    }\n    return (\n        <div className=\"modalBox\">\n            <form className=\"pad\" onSubmit={handleAddWearable}>\n                <h2>Add new wearable</h2>\n                <label htmlFor=\"name\">Wearable name:</label>\n                <input type=\"text\" onChange={(e) => updateFormData('name', e.target.value)} />\n                <label htmlFor=\"value\">Category:</label>\n                <select style={{ marginBottom: '1rem', padding: '0.5rem' }} onChange={(e) => updateFormData('category', e.target.value)} value={formData.category}>\n                    <option value=\"head\">Head</option>\n                    <option value=\"face\">Face</option>\n                    <option value=\"body\">Body</option>\n                </select>\n                <label htmlFor=\"src\">Image link:</label>\n                <input type=\"text\" onChange={(e) => updateFormData('src', e.target.value)} />\n                <label htmlFor=\"value\">Wearable value:</label>\n                <input type=\"text\" onChange={(e) => updateFormData('value', e.target.value)} />\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction TeacherBadges() {\n    return (\n        <div className=\"Main\">\n            badges!\n            <ul>\n                <li>add new badges</li>\n                <li>edit/delete badges</li>\n            </ul>\n        </div>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["69"],"import { useState } from 'react';\n\nexport default function Marketplace(props) {\n    const { wearables } = props;\n    const [preview, setPreview] = useState({});\n    const [category, setCategory] = useState('head');\n    const updatePreview = ({ category, src, name }) => {\n        if (preview[category]) {\n            const previewObjectMinusCategory = (prevState) => {\n                const object = {...prevState};\n                delete object[category];\n                return object;\n            }\n            setPreview(prevState => ({\n                ...previewObjectMinusCategory(prevState)\n            }));\n            return;\n        }\n        setPreview(prevState => ({\n            ...prevState,\n            [category]: { src, name }\n        }));\n    }\n    const generatePreview = (preview) => {\n        const images = [];\n        for (let wearable in preview) {\n            images.push(<img src={preview[wearable].src} className={preview[wearable].category} />);\n        }\n        return images;\n    }\n    const generateWearables = (category) => {\n        const filteredList = wearables.filter(wearable => wearable.category === category);\n        const array = [];\n        for (let i = 0; i < filteredList.length; i++) {\n            array.push(\n                <div className=\"wearableItem\" key={`${category}-wearable-${filteredList[i].name}`}>\n                    <button className=\"stealth\">\n                        <img\n                            alt={filteredList[i].name}\n                            src={filteredList[i].src}\n                            onClick={() => updatePreview(filteredList[i])} />\n                    </button>\n                </div>\n            );\n        }\n        return array;\n    }\n    return (\n        <div className=\"Marketplace\">\n            <div id=\"demo\" onClick={() => console.table(preview)}></div>\n            <div className=\"marketplacePreview\">\n                {generatePreview(preview)}\n            </div>\n            <div className=\"marketplaceCategories\">\n                <button className=\"stealth\" onClick={() => setCategory('head')}>Head</button>\n                <button className=\"stealth\" onClick={() => setCategory('face')}>Face</button>\n                <button className=\"stealth\" onClick={() => setCategory('body')}>Body</button>\n            </div>\n            <div className=\"marketplaceWearables\">\n                {generateWearables(category)}\n            </div>\n        </div>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["70"],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"73","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":93,"column":30,"nodeType":"79","endLine":93,"endColumn":32,"suggestions":"80"},{"ruleId":"77","severity":1,"message":"81","line":52,"column":8,"nodeType":"79","endLine":52,"endColumn":21,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":27,"column":25,"nodeType":"85","endLine":27,"endColumn":99},{"ruleId":"77","severity":1,"message":"86","line":30,"column":8,"nodeType":"79","endLine":30,"endColumn":21,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'student._id'. Either include it or remove the dependency array.","ArrayExpression",["90"],"React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["91"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},{"desc":"95","fix":"96"},{"desc":"97","fix":"98"},"Update the dependencies array to be: [student._id]",{"range":"99","text":"100"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"101","text":"102"},"Update the dependencies array to be: [getHomework, student._id]",{"range":"103","text":"104"},[3572,3574],"[student._id]",[1872,1885],"[getTeacherData, teacher._id]",[1079,1092],"[getHomework, student._id]"]