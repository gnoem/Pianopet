[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js":"20"},{"size":500,"mtime":1607403407622,"results":"21","hashOfConfig":"22"},{"size":2547,"mtime":1613722856655,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1607403407623,"results":"24","hashOfConfig":"22"},{"size":769,"mtime":1614047464481,"results":"25","hashOfConfig":"22"},{"size":97,"mtime":1607733049448,"results":"26","hashOfConfig":"22"},{"size":617,"mtime":1613104797140,"results":"27","hashOfConfig":"22"},{"size":8335,"mtime":1613697034845,"results":"28","hashOfConfig":"22"},{"size":410,"mtime":1613709289227,"results":"29","hashOfConfig":"22"},{"size":684,"mtime":1612233978520,"results":"30","hashOfConfig":"22"},{"size":965,"mtime":1612233987275,"results":"31","hashOfConfig":"22"},{"size":13157,"mtime":1614047132428,"results":"32","hashOfConfig":"22"},{"size":15032,"mtime":1614053277073,"results":"33","hashOfConfig":"22"},{"size":21771,"mtime":1614043756546,"results":"34","hashOfConfig":"22"},{"size":17433,"mtime":1614054128288,"results":"35","hashOfConfig":"22"},{"size":763,"mtime":1613722986777,"results":"36","hashOfConfig":"22"},{"size":4621,"mtime":1613791108724,"results":"37","hashOfConfig":"22"},{"size":1144,"mtime":1614054115657,"results":"38","hashOfConfig":"22"},{"size":2782,"mtime":1614039397743,"results":"39","hashOfConfig":"22"},{"size":1834,"mtime":1613715784896,"results":"40","hashOfConfig":"22"},{"size":6253,"mtime":1613975599081,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"sahw5t",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"44"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"44"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["91","92"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["93","94"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",["95"],"import { ReactComponent as LoadingIcon } from './Loading.svg';\n\nfunction Loading(props) {\n    const { width, height } = props;\n    const style = new Object();\n    if (width) style.width = width + 'px';\n    if (height) style.height = height + 'px';\n    return (\n        <div className={`Loading${height ? ' mini' : ''}`} style={style}>\n            <LoadingIcon />\n        </div>\n    )\n}\n\nexport default Loading;","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],["96","97"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",["98","99","100"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport Closet from './Closet';\nimport Avatar from './Avatar';\nimport Marketplace from './Marketplace';\nimport ContextMenu from './ContextMenu';\nimport { prettifyDate } from '../utils';\nimport Button from './Button';\nimport MyAccount from './MyAccount';\n\nexport default function Student(props) {\n    const { student, wearables } = props;\n    const [view, setView] = useState('home');\n    const [avatar, setAvatar] = useState(null);\n    useEffect(() => {\n        // the following function converts student.avatar, which is an array of string IDs, to an object with category names as keys\n        const createAvatarObject = (avatarArray) => avatarArray.reduce((obj, id) => {\n            const index = wearables.findIndex(element => element._id === id);\n            const { category, _id, name, src, image } = wearables[index];\n            obj[category] = { _id, name, src, image };\n            return obj;\n        }, {});\n        setAvatar(createAvatarObject(student.avatar));\n    }, [student.avatar, view]);\n    const closet = student.closet.map(_id => { // converting student.closet, which is an array of string IDs, to an array of objects\n        const index = wearables.findIndex(element => element._id === _id);\n        const thisWearable = wearables[index];\n        return thisWearable;\n    });\n    const formatCoins = (number) => number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    const state = {\n        view,\n        avatar,\n        closet,\n        updateView: setView,\n        updateAvatar: setAvatar\n    }\n    return (\n        <Dashboard teacher={false}>\n            <Header>\n                <Nav>\n                    <button className=\"stealth link\" onClick={() => setView('home')}>Home</button>\n                    <button className=\"stealth link\" onClick={() => setView('closet')}>Closet</button>\n                    <button className=\"stealth link\" onClick={() => setView('marketplace')}>Marketplace</button>\n                    <button className=\"stealth link\" onClick={() => setView('badges')}>Badges</button>\n                </Nav>\n                <StudentProfileDropdown {...props} {...state} />\n            </Header>\n            <Sidebar>\n                <div className=\"StudentSidebar\">\n                    <div className=\"avatarContainer\">\n                        <Avatar {...props} {...state} />\n                    </div>\n                    <div className=\"studentStats\">\n                        <img className=\"statsIcon\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"statsLabel\" onClick={() => setView('marketplace')}>{formatCoins(student.coins)}</span>\n                        <img className=\"statsIcon\" alt=\"badge icon\" src=\"assets/Badge_ico.svg\" />\n                        <span className=\"statsLabel\" onClick={() => setView('badges')}>{student.badges.length.toString()}</span>\n                    </div>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction StudentProfileDropdown(props) {\n    const { student } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <div className={`User ${expanded ? ' expanded' : ''}`}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{student.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={student.profilePic ? student.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              children={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView('account')}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView('settings')}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </div>\n    )\n}\n\nfunction Main(props) {\n    const { view, student } = props;\n    switch (view) {\n        case 'home': return <Homework {...props} />;\n        case 'closet': return <StudentCloset {...props} />\n        case 'marketplace': return <StudentMarketplace {...props} />;\n        case 'badges': return <StudentBadges {...props} />;\n        case 'account': return <MyAccount {...props} userType=\"student\" user={student} />;\n        default: return <Homework {...props} />;\n    }\n}\n\nfunction Homework(props) {\n    const { student } = props;\n    const [homework, setHomework] = useState(null);\n    const getHomework = async () => {\n        const response = await fetch(`/student/${student._id}/homework`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        setHomework(body.homework);\n    }\n    useEffect(() => {\n        getHomework();\n    }, []);\n    const generateHomeworkModules = () => {\n        return homework.map(homework => (\n            <HomeworkModule key={`homeworkModule-${homework._id}`} {...props} {...homework} refreshHomework={getHomework} />\n        ));\n    };\n    return (\n        <div className=\"Main\">\n            <h1>My Homework Tracker</h1>\n            <div className=\"ViewHomework\">\n                {homework ? generateHomeworkModules() : ''}\n            </div>\n        </div>\n    );\n}\n\nfunction HomeworkModule(props) {\n    const { _id, date, headline, assignments } = props;\n    const homeworkAssignments = () => {\n        return assignments.map((info, index) => (\n            <Assignment key={`homeworkAssignment-${_id}-${index}`} {...props} index={index} {...info} _id={_id} />\n        ));\n    }\n    return (\n        <div className=\"Homework\">\n            <div className=\"Header\">\n                <div>\n                    <span className=\"date\">{prettifyDate(date)}</span>\n                    <h3>{headline}</h3>\n                </div>\n            </div>\n            <div className=\"Body\">\n                <ul>\n                    <li className=\"smol\">\n                        <div className=\"label\">Assignments</div>\n                        <div className=\"progress\">Progress</div>\n                    </li>\n                </ul>\n                <ol>\n                    {homeworkAssignments()}\n                </ol>\n            </div>\n        </div>\n    );\n}\n\nfunction Assignment(props) {\n    const { _id, index, label, progress, recorded } = props;\n    const updateHomeworkProgress = async (value) => {\n        // todo don't wait for server response to visually update UI!!!\n        const response = await fetch(`/assignment/${_id}/progress`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                index,\n                value\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no { success: true } response from server');\n        props.refreshHomework();\n    }\n    return (\n        <li>\n            <div className=\"label\">{label}</div>\n            <div className=\"progress\">\n                <button onClick={progress === 0 ? () => {} : () => updateHomeworkProgress(progress - 1)}\n                    className={`stealth${progress === 0 ? ' disabled' : ''}`}\n                    style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-minus-circle\"></i></button>\n                <ProgressBar percentage={(100 * progress) / 4} />\n                <button onClick={progress === 4 ? () => {} : () => updateHomeworkProgress(progress + 1)}\n                    className={`stealth${progress === 4 ? ' disabled' : ''}`}\n                    style={{ visibility: recorded ? 'hidden' : 'visible' }}><i className=\"fas fa-plus-circle\"></i></button>\n            </div>\n        </li>\n    )\n}\n\nfunction ProgressBar(props) {\n    const { percentage } = props;\n    return (\n        <div className=\"ProgressBar\">\n            <div className=\"bar\" style={{ width: percentage + '%' }}></div>\n        </div>\n    )\n}\n\nfunction StudentMarketplace(props) {\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentMarketplace\">\n                <h1>Marketplace</h1>\n                <Marketplace {...props} />\n            </div>\n        </div>\n    );\n}\n\nfunction StudentCloset(props) {\n    const { student, avatar } = props;\n    const handleUpdateAvatar = async () => {\n        const updatedAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const response = await fetch(`student/${student._id}/avatar`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: updatedAvatar\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshData();\n    }\n    const unsavedChanges = () => {\n        // there has got to be a better way todo this\n        const previewAvatar = Object.keys(avatar).map(key => avatar[key]._id);\n        const trueAvatar = student.avatar;\n        if (trueAvatar.length !== previewAvatar.length) return true;\n        const trueAvatarObject = {};\n        const previewAvatarObject = {};\n        for (let id of trueAvatar) trueAvatarObject[id] = true;\n        for (let id of previewAvatar) previewAvatarObject[id] = true;\n        // checking if the two arrays have equal contents (regardless of order)\n        if ((previewAvatar.every(string => trueAvatarObject[string]))\n        && (trueAvatar.every(string => previewAvatarObject[string]))) {\n            return false;\n        }\n        else return true;\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Closet</h1>\n            <Closet {...props} />\n            {unsavedChanges() && <div className=\"buttons\"><Button onClick={handleUpdateAvatar} className=\"slideUpIn\">Save Changes</Button></div>}\n        </div>\n    );\n}\n\nfunction StudentBadges(props) {\n    const { student, badges } = props;\n    const badgesRef = useRef({});\n    const generateBadgeList = () => {\n        if (!student.badges.length) return \"You haven't earned any badges yet!\";\n        return badges.map(badge => {\n            const index = student.badges.findIndex(object => object.id === badge._id);\n            const studentHasBadge = index !== -1;\n            const badgeHasBeenRedeemed = () => {\n                if (!studentHasBadge) return;\n                if (student.badges[index].redeemed) return true;\n                return false;\n            }\n            const redeemBadge = async () => {\n                if (badgeHasBeenRedeemed()) return;\n                badgesRef.current[badge._id].classList.add('redeemed');\n                const response = await fetch(`/student/${student._id}/badge/redeemed`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        badgeId: badge._id,\n                        badgeValue: badge.value\n                    })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                props.refreshData();\n            }\n            if (studentHasBadge) return (\n                <div\n                  key={`badgeList-${badge._id}`}\n                  ref={(el) => badgesRef.current[badge._id] = el}\n                  className={`badgeItem${badgeHasBeenRedeemed() ? ' redeemed' : ''}`}>\n                    <img\n                        className=\"badgeImage\"\n                        alt={badge.name}\n                        src={badge.src} />\n                    <span className=\"badgeName\">{badge.name}</span>\n                    <span onClick={redeemBadge}>\n                        <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"badgeValue\">{badge.value}</span>\n                    </span>\n                </div>\n            );\n        });\n    }\n    return (\n        <div className=\"Main\">\n            <div className=\"StudentBadges\">\n                <h1>My Badges</h1>\n                <div className=\"BadgeList\">\n                    {generateBadgeList()}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["101","102"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["103","104","105"],"import { useState, useRef, useEffect } from 'react';\nimport Loading from './Loading';\nimport { shrinkit } from '../utils';\nimport Dropdown from './Dropdown';\n\nexport default function Marketplace(props) {\n    const { viewingAsTeacher, student, avatar, teacher, wearables } = props;\n    const [preview, setPreview] = useState(() => {\n        return viewingAsTeacher ? {} : avatar\n    });\n    const [category, setCategory] = useState(() => teacher.wearableCategories[0]);\n    const wearableRefs = useRef({});\n    const editOrDeleteWearable = (e, _id) => {\n        e.preventDefault();\n        if (!viewingAsTeacher) return;\n        const index = wearables.findIndex(wearable => wearable._id === _id);\n        const thisWearable = wearables[index];\n        const editWearable = () => props.updateModal(<AddOrEditWearable {...props} wearable={thisWearable} />);\n        const deleteWearable = () => {\n            const handleDelete = async (e) => {\n                e.preventDefault();\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/wearable/${_id}`, { method: 'DELETE' });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                shrinkit(wearableRefs.current[_id], true);\n                props.refreshTeacher();\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Are you sure?</h2>\n                    <img alt={thisWearable.name} src={thisWearable.src} style={{ float: 'right' }} />\n                    Are you sure you want to delete the wearable \"{thisWearable.name}\"? This action cannot be undone.\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ?   <Loading />\n                            :   <form onSubmit={handleDelete}>\n                                    <button type=\"submit\">Yes, I'm sure</button>\n                                    <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                </form>\n                            }\n                    </div>\n                </div>\n            )\n            props.updateModal(content());\n        }\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={editWearable}>Edit</button></li>\n                <li><button onClick={deleteWearable}>Delete</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const updatePreview = ({ category, _id, name, src, value, image }) => {\n        if (preview[category] && preview[category].name === name) {\n            const previewObjectMinusCategory = (prevState) => {\n                const object = {...prevState};\n                delete object[category];\n                return object;\n            }\n            setPreview(prevState => ({\n                ...previewObjectMinusCategory(prevState)\n            }));\n            return;\n        }\n        setPreview(prevState => ({\n            ...prevState,\n            [category]: { _id, name, src, value, image }\n        }));\n    }\n    const addOrEditCategory = (e, originalName) => {\n        e.preventDefault();\n        if (!viewingAsTeacher) return;\n        const editingCategory = teacher.wearableCategories.includes(originalName);\n        const handleAddOrEditCategory = async (e, categoryName) => {\n            e.preventDefault();\n            props.updateModal(content({ loadingIcon: true }));\n            const fromDropdown = !!categoryName;\n            const formData = editingCategory\n                ?   { originalName, updatedName: e.target[0].value }\n                :   { categoryName: fromDropdown ? categoryName : e.target[0].value }\n            const response = await fetch(`/teacher/${teacher._id}/wearable-category`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(formData)\n            });\n            const body = await response.json();\n            if (!body) return console.log('no response from server');\n            if (!body.success) return console.log('no success response from server');\n            props.refreshTeacher();\n            if (editingCategory) {\n                props.refreshData(); // in case any wearables were affected by category name change\n                if (category === originalName) setCategory(e.target[0].value);\n            }\n            props.updateModal(false);\n        }\n        let content = (options = {\n            loadingIcon: false\n        }) => (\n            <div className=\"modalBox\">\n                <h2>{editingCategory ? 'Edit' : 'Add new'} category</h2>\n                <form onSubmit={handleAddOrEditCategory} autoComplete=\"off\">\n                    <label htmlFor=\"categoryName\">Category name:</label>\n                    <input type=\"text\" name=\"categoryName\" defaultValue={editingCategory ? originalName : ''} />\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ? <Loading />\n                            : <input type=\"submit\" />\n                        }\n                    </div>\n                </form>\n            </div>\n        );\n        props.updateModal(content);\n    }\n    const editCategory = (e, categoryName) => {\n        if (!viewingAsTeacher) return;\n        e.preventDefault();\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={(e) => addOrEditCategory(e, categoryName)}>Edit</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const studentOperations = {\n        buyWearable: ({ _id, name, src, value }) => {\n            if (viewingAsTeacher) return;\n            const handleSubmit = async (e) => {\n                e.preventDefault();\n                if (student.coins < value) {\n                    let cantAfford = (\n                        <div className=\"modalBox\">\n                            <h2>Not enough coins</h2>\n                            You don't have enough coins to purchase this item. It costs {value} and you only have {student.coins}.\n                            <div className=\"buttons\">\n                                <button type=\"button\" onClick={() => props.updateModal(false)}>OK</button>\n                            </div>\n                        </div>\n                    );\n                    props.updateModal(cantAfford);\n                    return;\n                }\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/student/${student._id}/closet`, {\n                    method: 'PUT',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        wearableId: _id,\n                        wearableCost: value\n                    })\n                });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox hasImage\">\n                    <div>\n                        <h2>Confirm purchase</h2>\n                        Are you sure you want to purchase <b>{name}</b> for <span className=\"coins\"><b>{value}</b>?</span>\n                        <div className=\"buttons\">\n                            {options.loadingIcon\n                                ?   <Loading />\n                                :   <form onSubmit={handleSubmit}>\n                                        <button type=\"submit\">Yes, I'm sure</button>\n                                        <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                    </form>\n                                }\n                        </div>\n                    </div>\n                    <div className=\"flex center\"><img alt={name} src={src} /></div>\n                </div>\n            );\n            props.updateModal(content());\n        }\n    }\n    const generate = {\n        previewObject: (preview) => {\n            const images = [];\n            for (let category in preview) {\n                const thisWearable = preview[category];\n                const style = {\n                    top: `${thisWearable.image.y}%`,\n                    left: `${thisWearable.image.x}%`,\n                    width: `${thisWearable.image.w}%`\n                }\n                images.push(\n                    <img\n                      key={`marketplacePreview-${category}`}\n                      className={`previewWearable ${category}`}\n                      src={thisWearable.src}\n                      style={style}\n                    />\n                );\n            }\n            return (\n                <div className=\"previewBox\">\n                    <img alt=\"base\" className=\"previewBase\" src=\"https://i.imgur.com/RJ9U3wW.png\" />\n                    {images}\n                </div>\n            );\n        },\n        previewDescription: (preview) => {\n            if (viewingAsTeacher) return;\n            const previewItems = [];\n            for (let category in preview) {\n                previewItems.push(\n                    <li key={`marketplacePreviewDescription-${category}`}>\n                        <span className=\"wearableName\">{preview[category].name}</span>\n                        {!viewingAsTeacher && student.closet.includes(preview[category]._id)\n                            ?   <span className=\"owned\"></span>\n                            :   <button onClick={() => studentOperations.buyWearable(preview[category])}>\n                                    <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                                    <span className=\"wearableValue\">{preview[category].value}</span>\n                                </button>\n                            }\n                    </li>\n                )\n            }\n            return (\n                <ul className=\"previewDescription\">\n                    <h3>Previewing:</h3>\n                    {previewItems}\n                </ul>\n            );\n        },\n        categoriesList: (categories) => {\n            const array = categories.map(category => (\n                <button\n                  key={`wearableCategories-toolbar-${category}`}\n                  className=\"stealth\"\n                  onClick={() => setCategory(category)}\n                  onContextMenu={(e) => editCategory(e, category)}>\n                    {category}\n                </button>\n            ))\n            if (viewingAsTeacher) array.push(\n                <button key=\"wearableCategories-toolbar-addNew\" className=\"add\" onClick={addOrEditCategory}></button>\n            );\n            return array;\n        },\n        wearablesList: (category) => {\n            const filteredList = wearables.filter(wearable => wearable.category === category);\n            return filteredList.map(wearable => {\n                const hasWearable = (() => {\n                    if (viewingAsTeacher) return false;\n                    if (student.closet.includes(wearable._id)) return true;\n                    return false;\n                })();\n                return (\n                    <button\n                      ref={(el) => wearableRefs.current[wearable._id] = el}\n                      key={`${category}-wearable-${wearable.name}`}\n                      className={`stealth wearableItem${hasWearable ? ' owned' : ''}`}\n                      onClick={() => updatePreview(wearable)}\n                      onContextMenu={(e) => editOrDeleteWearable(e, wearable._id)}>\n                        <img\n                            alt={wearable.name}\n                            src={wearable.src}\n                        />\n                        <span className=\"wearableName\">{wearable.name}</span>\n                        <img className=\"coin\" alt=\"coin icon\" src=\"assets/Coin_ico.png\" />\n                        <span className=\"wearableValue\">{wearable.value}</span>\n                    </button>\n                )\n            });\n        }    \n    }\n    return (\n        <div className=\"Marketplace\">\n            <div className=\"marketplacePreview\">\n                {generate.previewObject(preview)}\n                {generate.previewDescription(preview)}\n            </div>\n            <div className=\"marketplaceCategories\">\n                {generate.categoriesList(teacher.wearableCategories)}\n            </div>\n            <div className=\"marketplaceWearables\">\n                <div className=\"wearablesGrid\">\n                    {generate.wearablesList(category)}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport function AddOrEditWearable(props) {\n    const { teacher, wearable } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        teacherCode: wearable ? wearable.teacherCode : teacher._id,\n        name: wearable ? wearable.name : '',\n        category: wearable ? wearable.category : teacher.wearableCategories[0],\n        src: wearable ? wearable.src : '',\n        value: wearable ? wearable.value : '',\n        image: {\n            w: wearable && wearable.image ? wearable.image.w : 50,\n            x: wearable && wearable.image ? wearable.image.x : 10,\n            y: wearable && wearable.image ? wearable.image.y : 40\n        }\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const updateImage = (newStuff) => {\n        setFormData(prevState => ({\n            ...prevState,\n            image: {\n                ...prevState.image,\n                ...newStuff\n            }\n        }));\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        const ROUTE = wearable ? `/wearable/${wearable._id}` : '/wearable';\n        const response = await fetch(ROUTE, {\n            method: wearable ? 'PUT' : 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.updateModal(false);\n        props.refreshData();\n    }\n    const addCategory = async (categoryName) => {\n        const response = await fetch(`/teacher/${teacher._id}/wearable-category`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                _id: teacher._id,\n                categoryName\n            })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.refreshTeacher();\n    }\n    const dropdownListItems = () => {\n        const listItems = teacher.wearableCategories.map(item => ({\n            value: item,\n            display: item\n        }));\n        return listItems;\n    }\n    return (\n        <div className=\"modalBox\">\n            <h2>Add new wearable</h2>\n            <form className=\"pad\" onSubmit={handleSubmit}>\n                <div className=\"addWearableForm\">\n                    <div>\n                        <label htmlFor=\"name\">Wearable name:</label>\n                        <input\n                            type=\"text\"\n                            defaultValue={wearable ? wearable.name : ''}\n                            onChange={(e) => updateFormData('name', e.target.value)} />\n                        <label htmlFor=\"value\">Category:</label>\n                        <Dropdown\n                            minWidth=\"10rem\"\n                            defaultValue={{ value: formData.category, display: formData.category }}\n                            listItems={dropdownListItems()}\n                            addNew={addCategory}\n                            onChange={(value) => updateFormData('category', value)} />\n                        <label htmlFor=\"src\">Image link:</label>\n                        <input type=\"text\" defaultValue={wearable ? wearable.src : ''} onChange={(e) => updateFormData('src', e.target.value)} />\n                        <label htmlFor=\"value\">Wearable value:</label>\n                        <input type=\"text\" defaultValue={wearable ? wearable.value : ''} onChange={(e) => updateFormData('value', e.target.value)} />\n                    </div>\n                    <AddOrEditWearablePreview src={formData.src} image={formData.image} updateImage={updateImage} />\n                </div>\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    );\n}\n\nfunction AddOrEditWearablePreview(props) {\n    const { src, image } = props;\n    const [mouseIsDown, setMouseIsDown] = useState(false);\n    const [mouseIsMoving, setMouseIsMoving] = useState(false);\n    const [elementPosition, setElementPosition] = useState({\n        x: 0,\n        y: 0\n    });\n    const [elementOffset, setElementOffset] = useState(null);\n    const preview = useRef(null);\n    const draggable = useRef(null);\n    useEffect(() => {\n        const draggableObject = draggable.current;\n        const previewBox = preview.current;\n        if (!draggableObject || !previewBox) return;\n        setElementPosition({\n            x: (image.x * previewBox.scrollWidth) / 100,\n            y: (image.y * previewBox.scrollHeight) / 100\n        });\n        const mouseup = () => setMouseIsDown(false);\n        const mousedown = (e) => {\n            setMouseIsDown(e);\n            window.addEventListener('mouseup', mouseup);\n        }\n        draggableObject.addEventListener('mousedown', mousedown);\n        return () => {\n            draggableObject.removeEventListener('mousedown', mousedown);\n            window.removeEventListener('mouseup', mouseup);\n        }\n    }, []);\n    useEffect(() => {\n        const previewBox = preview.current;\n        const mousemove = (e) => {\n            e.preventDefault();\n            setMouseIsMoving(e);\n        }\n        if (!mouseIsDown) {\n            setMouseIsDown(false);\n            setMouseIsMoving(false);\n            const calculateImageCoords = () => ({\n                x: (elementPosition.x * 100) / previewBox.scrollWidth,\n                y: (elementPosition.y * 100) / previewBox.scrollHeight\n            });\n            props.updateImage(calculateImageCoords());\n            previewBox.removeEventListener('mousemove', mousemove);\n            return;\n        }\n        const e = mouseIsDown;\n        const calculateElementOffset = (e) => {\n            const mouseX = e.clientX - previewBox.getBoundingClientRect().left;\n            const mouseY = e.clientY - previewBox.getBoundingClientRect().top;\n            const offsetX = mouseX - elementPosition.x;\n            const offsetY = mouseY - elementPosition.y;\n            setElementOffset({\n                x: offsetX,\n                y: offsetY\n            });\n        }\n        calculateElementOffset(e);\n        previewBox.addEventListener('mousemove', mousemove);\n        return () => previewBox.removeEventListener('mousemove', mousemove);\n    }, [mouseIsDown]);\n    useEffect(() => {\n        if (!mouseIsMoving) return;\n        const previewBox = preview.current;\n        const e = mouseIsMoving;\n        const mouseX = e.clientX - previewBox.getBoundingClientRect().left;\n        const mouseY = e.clientY - previewBox.getBoundingClientRect().top;\n        setElementPosition({\n            x: mouseX - elementOffset.x,\n            y: mouseY - elementOffset.y\n        });\n    }, [mouseIsMoving, elementOffset]);\n    const updateImageSize = (e) => {\n        e.preventDefault();\n        const percentage = parseInt(e.target.value) + 1;\n        const draggableObject = draggable.current;\n        draggableObject.style.width = percentage + '%';\n        props.updateImage({ w: percentage });\n    }\n    return (\n        <div>\n            <label>Preview:</label>\n            <div className=\"previewBox\" ref={preview}>\n                <img alt=\"base\" className=\"previewBase\" src=\"https://i.imgur.com/RJ9U3wW.png\" />\n                <img\n                  alt=\"preview\"\n                  src={src}\n                  ref={draggable}\n                  className={`draggable${mouseIsDown ? ' dragging' : ''}`}\n                  style={{\n                      width: image.w + '%',\n                      transform: `translate3d(${elementPosition.x}px, ${elementPosition.y}px, 0)`\n                    }} />\n            </div>\n            <input type=\"range\" defaultValue={image.w - 1} min=\"0\" max=\"99\" onChange={updateImageSize} />\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",["106"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",["107"],"import { useEffect } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function ContextMenu(props) {\n    useEffect(() => {\n        const closeContextMenu = (e) => {\n            if (props.ignoreClick) { // will be an array like ['.Modal', '#menu li']\n                for (let selector of props.ignoreClick) {\n                    if (elementHasParent(e.target, selector)) return;\n                }\n            }\n            props.updateContextMenu(false);\n        }\n        window.addEventListener('click', closeContextMenu);\n        return () => window.removeEventListener('click', closeContextMenu);\n    }, []);\n    return (\n        <div className=\"ContextMenu\" style={props.position}>\n            {props.children}\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["108","109"],"import { useEffect, useRef, useState } from 'react';\nimport { elementHasParent } from '../utils';\n\nexport default function Dropdown(props) {\n    const { defaultValue, listItems, restoreDefault } = props;\n    const [display, setDisplay] = useState(() => {\n        if (!listItems || !listItems.length) return 'Add new...';\n        if (!defaultValue) return 'Select one';\n        return defaultValue.display;\n    });\n    const [isOpen, setIsOpen] = useState(false);\n    const [addingNew, setAddingNew] = useState(false);\n    const dropdownList = useRef(null);\n    useEffect(() => {\n        const closeDropdown = (e) => {\n            if (elementHasParent(e.target, '.dropdownDisplay')) return;\n            if (elementHasParent(e.target, '.addNew')) return;\n            setIsOpen(false);\n        }\n        window.addEventListener('click', closeDropdown);\n        return () => window.removeEventListener('click', closeDropdown);\n    }, []);\n    useEffect(() => {\n        if (!dropdownList || !dropdownList.current) return;\n        if (isOpen) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px'; // plus 1px to account for 1px bottom border\n        else {\n            dropdownList.current.style.maxHeight = '0px';\n            setAddingNew(false); // unrelated to maxHeight adjustment thing\n        }\n    }, [isOpen]);\n    useEffect(() => {\n        if (addingNew) dropdownList.current.style.maxHeight = dropdownList.current.scrollHeight + 1 + 'px';\n    }, [addingNew]);\n    useEffect(() => {\n        if (restoreDefault) setDisplay(defaultValue.display);\n    }, [restoreDefault]);\n    const toggleIsOpen = () => setIsOpen(prevState => !prevState);\n    const handleClick = (e) => {\n        setDisplay(e.target.innerHTML);\n        props.onChange(e.target.getAttribute('data-value'));\n    }\n    const generateList = () => {\n        const buttonForAddNew =\n            <AddNew {...props}\n                key=\"dropdownItem-addNew\"\n                addingNew={addingNew}\n                updateAddingNew={setAddingNew}\n                updateIsOpen={setIsOpen}\n                updateDisplay={setDisplay}\n            />;\n        if ((!listItems || !listItems.length) && props.addNew) {\n            console.table(listItems);\n            return buttonForAddNew;\n        }\n        const array = [];\n        for (let item of listItems) {\n            array.push(\n                <li className=\"dropdownItem\" key={`dropdownItem-${item.value}`}>\n                    <button type=\"button\" data-value={item.value} onClick={handleClick}>{item.display}</button>\n                </li>\n            );\n        }\n        if (props.addNew) array.push(buttonForAddNew);\n        return array;\n    }\n    return (\n        <div className={`Dropdown${isOpen ? ' expanded' : ''}`} style={props.style}>\n            <div className=\"dropdownDisplay\" onClick={toggleIsOpen}>{display}</div>\n            <ul className=\"dropdownList\" ref={dropdownList}>{generateList()}</ul>\n        </div>\n    );\n}\n\nfunction AddNew(props) {\n    const { addingNew } = props;\n    const [inputValue, setInputValue] = useState(null);\n    const inputRef = useRef(null);\n    useEffect(() => {\n        if (!addingNew) return setInputValue(null);\n        inputRef.current.focus();\n        const handleKeydown = (e) => {\n            if (e.key === 'Escape') return props.updateAddingNew(false);\n            if (e.key === 'Enter') {\n                e.preventDefault();\n                props.addNew(inputRef.current.value);\n                props.updateDisplay(inputRef.current.value);\n                props.onChange(inputRef.current.value);\n                props.updateIsOpen(false);\n                return;\n            }\n        }\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [addingNew]);\n    return (\n        <li className=\"dropdownItem\">\n            {addingNew\n                ?   <button type=\"button\" className=\"addNew active\">\n                        <input\n                            ref={inputRef}\n                            type=\"text\"\n                            defaultValue={inputValue}\n                            onChange={(e) => setInputValue(e.target.value)}\n                        />\n                        <span className=\"inputHint\">Press Enter to submit, Esc to cancel.</span>\n                    </button>\n                :   <button type=\"button\" className=\"addNew\" onClick={() => props.updateAddingNew(true)}>\n                        {props.buttonContent || 'Add new...'}\n                    </button>\n                }\n        </li>\n    )\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",["110","111"],"import { useState } from 'react';\n\nexport default function Closet(props) {\n    const { closet, avatar, teacher } = props;\n    const [category, setCategory] = useState(() => {\n        return teacher.wearableCategories.find(category => closet.some(wearable => wearable.category === category));\n    });\n    const generate = {\n        categoriesList: (closet) => {\n            return teacher.wearableCategories.map(category => {\n                const someClosetItemHasCategory = closet.some(wearable => wearable.category === category);\n                if (someClosetItemHasCategory) return (\n                    <button\n                      key={`closet-wearableCategories-${category}`}\n                      className=\"stealth\"\n                      onClick={() => setCategory(category)}>\n                          {category}\n                    </button>\n                )\n            });\n        },\n        wearablesList: (category) => {\n            const previewWearable = ({ category, _id, src, image }) => {\n                props.updateAvatar(prevState => {\n                    if (prevState[category] && prevState[category]._id === _id) {\n                        let prevStateMinusThisCategory = {...prevState};\n                        delete prevStateMinusThisCategory[category];\n                        return prevStateMinusThisCategory;\n                    }\n                    return ({\n                        ...prevState,\n                        [category]: { _id, src, image }\n                    });\n                });\n            }\n            return closet.map(wearable => {\n                const currentlyPreviewing = avatar[wearable.category] && avatar[wearable.category]._id === wearable._id;\n                if (wearable.category === category) return (\n                    <button\n                      key={`closetItem-${category}-${wearable._id}`}\n                      className={`stealth closetItem${currentlyPreviewing ? ' active' : ''}`} // if currently previewing, add light green background or something\n                      onClick={() => previewWearable(wearable)}>\n                        <img alt={wearable.name} src={wearable.src} />\n                        <span className=\"wearableName\">{wearable.name}</span>\n                    </button>\n                );\n            });\n        }\n    }\n    return (\n        <div className=\"Closet\">\n            <div id=\"demo\" onClick={() => console.table(props.avatar)}></div>\n            <div className=\"closetCategories\">\n                {generate.categoriesList(closet)}\n            </div>\n            <div className=\"closetWearables\">\n                <div className=\"wearablesGrid\">\n                    {generate.wearablesList(category)}\n                </div>\n            </div>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":5,"column":19,"nodeType":"120","messageId":"121","endLine":5,"endColumn":31},{"ruleId":"112","replacedBy":"122"},{"ruleId":"114","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":24,"column":8,"nodeType":"126","endLine":24,"endColumn":30,"suggestions":"127"},{"ruleId":"124","severity":1,"message":"128","line":119,"column":8,"nodeType":"126","endLine":119,"endColumn":10,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":268,"column":33,"nodeType":"132","messageId":"133","endLine":268,"endColumn":35},{"ruleId":"124","severity":1,"message":"134","line":39,"column":8,"nodeType":"126","endLine":39,"endColumn":21,"suggestions":"135"},{"ruleId":"124","severity":1,"message":"136","line":164,"column":8,"nodeType":"126","endLine":164,"endColumn":17,"suggestions":"137"},{"ruleId":"138","severity":1,"message":"139","line":203,"column":21,"nodeType":"140","endLine":208,"endColumn":23},{"ruleId":"124","severity":1,"message":"141","line":437,"column":8,"nodeType":"126","endLine":437,"endColumn":10,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"143","line":469,"column":8,"nodeType":"126","endLine":469,"endColumn":21,"suggestions":"144"},{"ruleId":"124","severity":1,"message":"145","line":33,"column":8,"nodeType":"126","endLine":33,"endColumn":21,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"147","line":16,"column":8,"nodeType":"126","endLine":16,"endColumn":10,"suggestions":"148"},{"ruleId":"124","severity":1,"message":"149","line":36,"column":8,"nodeType":"126","endLine":36,"endColumn":24,"suggestions":"150"},{"ruleId":"124","severity":1,"message":"147","line":94,"column":8,"nodeType":"126","endLine":94,"endColumn":19,"suggestions":"151"},{"ruleId":"130","severity":1,"message":"131","line":10,"column":60,"nodeType":"132","messageId":"133","endLine":10,"endColumn":62},{"ruleId":"130","severity":1,"message":"131","line":36,"column":40,"nodeType":"132","messageId":"133","endLine":36,"endColumn":42},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],["152"],["153"],"no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral",["152"],["153"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'wearables'. Either include it or remove the dependency array.","ArrayExpression",["154"],"React Hook useEffect has a missing dependency: 'getHomework'. Either include it or remove the dependency array.",["155"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.",["156"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["157"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'image.x' and 'image.y'. Either include them or remove the dependency array.",["158"],"React Hook useEffect has missing dependencies: 'elementPosition.x', 'elementPosition.y', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["159"],"React Hook useEffect has missing dependencies: 'getHomework', 'student.avatar', and 'wearables'. Either include them or remove the dependency array.",["160"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["161"],"React Hook useEffect has a missing dependency: 'defaultValue.display'. Either include it or remove the dependency array.",["162"],["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},"Update the dependencies array to be: [student.avatar, view, wearables]",{"range":"184","text":"185"},"Update the dependencies array to be: [getHomework]",{"range":"186","text":"187"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"188","text":"189"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"190","text":"191"},"Update the dependencies array to be: [image.x, image.y]",{"range":"192","text":"193"},"Update the dependencies array to be: [elementPosition.x, elementPosition.y, mouseIsDown, props]",{"range":"194","text":"195"},"Update the dependencies array to be: [getHomework, student._id, student.avatar, wearables]",{"range":"196","text":"197"},"Update the dependencies array to be: [props]",{"range":"198","text":"199"},"Update the dependencies array to be: [defaultValue.display, restoreDefault]",{"range":"200","text":"201"},"Update the dependencies array to be: [addingNew, props]",{"range":"202","text":"203"},[1097,1119],"[student.avatar, view, wearables]",[5372,5374],"[getHomework]",[1597,1610],"[getTeacherData, teacher._id]",[6386,6395],"[addNewWearable, teacher, wearableModal]",[18994,18996],"[image.x, image.y]",[20278,20291],"[elementPosition.x, elementPosition.y, mouseIsDown, props]",[1480,1493],"[getHomework, student._id, student.avatar, wearables]",[632,634],"[props]",[1586,1602],"[defaultValue.display, restoreDefault]",[3829,3840],"[addingNew, props]"]