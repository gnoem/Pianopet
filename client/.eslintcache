[{"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js":"1","/Users/ngw/Documents/Sites/Pianopet/client/src/App.js":"2","/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js":"3","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js":"4","/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js":"5","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js":"6","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js":"7","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js":"8","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js":"9","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js":"10","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js":"11","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js":"12","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js":"13","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js":"14","/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js":"15","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js":"16","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js":"17","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js":"18","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js":"19","/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js":"20","/Users/ngw/Documents/Sites/Pianopet/client/src/components/PianopetBase.js":"21","/Users/ngw/Documents/Sites/Pianopet/client/src/utils/ntc.js":"22","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Splat.js":"23"},{"size":500,"mtime":1607403407622,"results":"24","hashOfConfig":"25"},{"size":3282,"mtime":1614647672130,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1607403407623,"results":"27","hashOfConfig":"25"},{"size":1826,"mtime":1614419589385,"results":"28","hashOfConfig":"25"},{"size":97,"mtime":1607733049448,"results":"29","hashOfConfig":"30"},{"size":617,"mtime":1613104797140,"results":"31","hashOfConfig":"25"},{"size":8716,"mtime":1614306014271,"results":"32","hashOfConfig":"25"},{"size":400,"mtime":1614420066265,"results":"33","hashOfConfig":"25"},{"size":684,"mtime":1612233978520,"results":"34","hashOfConfig":"30"},{"size":965,"mtime":1612233987275,"results":"35","hashOfConfig":"25"},{"size":13222,"mtime":1614650096481,"results":"36","hashOfConfig":"25"},{"size":15071,"mtime":1614647513478,"results":"37","hashOfConfig":"25"},{"size":33094,"mtime":1614654539735,"results":"38","hashOfConfig":"25"},{"size":17774,"mtime":1614650231161,"results":"39","hashOfConfig":"25"},{"size":908,"mtime":1614420880876,"results":"40","hashOfConfig":"25"},{"size":4849,"mtime":1614653461718,"results":"41","hashOfConfig":"25"},{"size":1354,"mtime":1614650252738,"results":"42","hashOfConfig":"25"},{"size":4194,"mtime":1614648999236,"results":"43","hashOfConfig":"25"},{"size":1834,"mtime":1613715784896,"results":"44","hashOfConfig":"25"},{"size":6253,"mtime":1613975599081,"results":"45","hashOfConfig":"25"},{"size":1784,"mtime":1614323810625,"results":"46","hashOfConfig":"25"},{"size":44387,"mtime":1614317676027,"results":"47","hashOfConfig":"25"},{"size":2959,"mtime":1614319325962,"results":"48","hashOfConfig":"25"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"1e1hwtf",{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"sahw5t",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},"/Users/ngw/Documents/Sites/Pianopet/client/src/index.js",[],["99","100"],"/Users/ngw/Documents/Sites/Pianopet/client/src/App.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/reportWebVitals.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dashboard.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/AppContext.js",[],["101","102"],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/index.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Guest.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Loading.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MiniMenu.js",[],["103","104"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Modal.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Student.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Teacher.js",["105","106"],"import { useState, useEffect, useRef } from 'react';\nimport { Dashboard, Header, Sidebar, Nav } from './Dashboard';\nimport ViewStudent from './ViewStudent';\nimport Marketplace, { AddOrEditWearable } from './Marketplace';\nimport Loading from './Loading';\nimport ContextMenu from './ContextMenu';\nimport { shrinkit } from '../utils';\nimport MyAccount from './MyAccount';\nimport Dropdown from './Dropdown';\n\nexport default function Teacher(props) {\n    const { teacher } = props;\n    const [view, setView] = useState({ type: 'home' });\n    const [students, setStudents] = useState([]);\n    const [wearables, setWearables] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [badges, setBadges] = useState([]);\n    const getTeacherData = async () => {\n        const response = await fetch(`/teacher/${teacher._id}`);\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        setStudents(body.students);\n        setWearables(body.wearables);\n        setCategories(body.categories);\n        setBadges(body.badges);\n        if (view.type === 'student') {\n            const refreshCurrentStudent = (prevView) => {\n                let thisStudent = prevView.data;\n                let index = body.students.findIndex(student => student._id === thisStudent._id);\n                return body.students[index];\n            }\n            setView(prevView => ({\n                type: 'student',\n                data: refreshCurrentStudent(prevView)\n            }));\n        }\n    }\n    useEffect(() => {\n        getTeacherData();\n    }, [teacher._id]);\n    const generateStudentList = () => {\n        if (!students.length) return 'No students yet!';\n        const makeSureNameFits = (string) => {\n            if (string.length < 18) return string;\n            let shortenedString = string.substring(0, 17);\n            return shortenedString + '...';\n        }\n        const studentList = students.map(student => ({\n            value: student._id,\n            display: makeSureNameFits(student.firstName + ' ' + student.lastName)\n        }));\n        return (\n            <Dropdown\n                style={{ minWidth: '14rem' }}\n                restoreDefault={view.type !== 'student'}\n                defaultValue={{ value: null, display: 'Select one...' }}\n                listItems={studentList}\n                onChange={(_id) => setView({ type: 'student', data: students[students.findIndex(student => student._id === _id)] })}\n            />\n        );\n    }\n    const state = {\n        view,\n        students,\n        wearables,\n        categories,\n        badges,\n        updateView: setView,\n        refreshData: getTeacherData\n    }\n    return (\n        <Dashboard teacher={true}>\n            <Header>\n                <Nav>\n                    <button onClick={() => setView({ type: 'home' })}>Home</button>\n                    <button onClick={() => setView({ type: 'marketplace' })}>Marketplace</button>\n                    <button onClick={() => setView({ type: 'badges' })}>Badges</button>\n                </Nav>\n                <TeacherProfileDropdown {...props} {...state} />\n            </Header>\n            <Sidebar>\n                <h2>Students</h2>\n                {generateStudentList()}\n                <hr />\n                <div className=\"teacherCode\">\n                    Teacher code:<br />\n                    <b style={{ fontSize: '0.8rem' }}>{teacher._id}</b>\n                </div>\n            </Sidebar>\n            <Main {...props} {...state} />\n        </Dashboard>\n    );\n}\n\nfunction TeacherProfileDropdown(props) {\n    const { teacher } = props;\n    const [expanded, setExpanded] = useState(false);\n    const toggleExpanded = () => setExpanded(prevState => !prevState);\n    return (\n        <div className={`User${expanded ? ' expanded' : ''}`}>\n            <button onClick={toggleExpanded}>\n                <span className=\"name\">{teacher.firstName}</span>\n                <span className=\"caret\"></span>\n            </button>\n            <div className=\"pfp\" onClick={toggleExpanded}>\n                <img alt=\"pfp\" src={teacher.profilePic ? teacher.profilePic : 'assets/defaultpfp.jpg' } />\n            </div>\n            <ContextMenu\n              position={null}\n              ignoreClick={['.User .pfp', '.User > button']}\n              updateContextMenu={() => setExpanded(false)}\n              children={(\n                <ul>\n                    <li><button className=\"myAccount\" onClick={() => props.updateView({ type: 'account' })}>My Account</button></li>\n                    <li><button className=\"settings\" onClick={() => props.updateView({ type: 'settings' })}>Settings</button></li>\n                    <li><button className=\"logout\" onClick={props.logout}>Logout</button></li>\n                </ul>\n            )} />\n        </div>\n    )\n}\n\nfunction Main(props) {\n    const { view, teacher } = props;\n    switch (view.type) {\n        case 'home': return <Home {...props} />;\n        case 'student': return <ViewStudent {...props} student={view.data} />;\n        case 'marketplace': return <TeacherMarketplace {...props} />;\n        case 'badges': return <TeacherBadges {...props} />;\n        case 'account': return <MyAccount {...props} userType=\"teacher\" user={teacher} />;\n        case 'settings': return <Settings {...props} />;\n        default: return <Home {...props} />;\n    }\n}\n\nfunction Home() {\n    return (\n        <div className=\"Main padme\">\n            <h1>Dashboard</h1>\n            <ul>\n                <li>View student dashboard</li>\n                <ul>\n                    <li>Add homework</li>\n                    <li>Log assignment progress</li>\n                    <li>Give coins</li>\n                    <li>Award badges</li>\n                </ul>\n                <li>General - apply to all students</li>\n                <ul>\n                    <li>Add/edit/delete badges</li>\n                    <li>Add/edit/delete closet items</li>\n                </ul>\n            </ul>\n        </div>\n    );\n}\n\nfunction TeacherMarketplace(props) {\n    const { teacher, modal } = props;\n    const [wearableModal, setWearableModal] = useState(false);\n    useEffect(() => {\n        if (!modal) setWearableModal(false);\n    }, [modal]);\n    useEffect(() => {\n        if (wearableModal) addNewWearable();\n    }, [teacher]);\n    const addNewWearable = () => {\n        props.updateModal(<AddOrEditWearable {...props} />);\n        setWearableModal(true);\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Marketplace</h1>\n            <Marketplace {...props} viewingAsTeacher={true} />\n            <button onClick={addNewWearable}>Add new wearable</button>\n        </div>\n    );\n}\n\nfunction TeacherBadges(props) {\n    const addNewBadge = () => {\n        props.updateModal(<AddOrEditBadge {...props} />)\n    }\n    return (\n        <div className=\"Main\">\n            <h1>Badges</h1>\n            <Badges {...props} />\n            <button onClick={addNewBadge}>Add new badge</button>\n        </div>\n    )\n}\n\nfunction Badges(props) {\n    const { badges } = props;\n    const badgesRef = useRef({});\n    const awardBadge = (_id) => {\n        const index = badges.findIndex(badge => badge._id === _id);\n        const thisBadge = badges[index];\n        props.updateModal(<AwardBadge {...props} badge={thisBadge} />);\n    }\n    const editOrDeleteBadge = (e, _id) => {\n        e.preventDefault();\n        const index = badges.findIndex(badge => badge._id === _id);\n        const thisBadge = badges[index];\n        const editBadge = () => props.updateModal(<AddOrEditBadge {...props} badge={thisBadge} />);\n        const deleteBadge = () => {\n            const handleDelete = async () => {\n                props.updateModal(content({ loadingIcon: true }));\n                const response = await fetch(`/badge/${_id}`, { method: 'DELETE' });\n                const body = await response.json();\n                if (!body) return console.log('no response from server');\n                if (!body.success) return console.log('no success response from server');\n                shrinkit(badgesRef.current[_id], true);\n                props.refreshTeacher();\n                props.refreshData();\n                props.updateModal(false);\n            }\n            let content = (options = {\n                loadingIcon: false\n            }) => (\n                <div className=\"modalBox\">\n                    <h2>Are you sure?</h2>\n                    <img alt={thisBadge.name} src={thisBadge.src} style={{ float: 'right' }} />\n                    Are you sure you want to delete the badge \"{thisBadge.name}\"? This action cannot be undone.\n                    <div className=\"buttons\">\n                        {options.loadingIcon\n                            ?   <Loading />\n                            :   <form onSubmit={handleDelete}>\n                                    <button type=\"submit\">Yes, I'm sure</button>\n                                    <button type=\"button\" className=\"greyed\" onClick={() => props.updateModal(false)}>Cancel</button>\n                                </form>\n                            }\n                    </div>\n                </div>\n            )\n            props.updateModal(content());\n        }\n        let content = (\n            <ul className=\"editDelete\">\n                <li><button onClick={editBadge}>Edit</button></li>\n                <li><button onClick={deleteBadge}>Delete</button></li>\n            </ul>\n        );\n        props.updateContextMenu(e, content);\n    }\n    const generateBadgeList = () => {\n        return badges.map(badge => (\n            <div\n              key={`badgeList-${badge._id}`}\n              ref={(el) => badgesRef.current[badge._id] = el}\n              className=\"badgeItem\">\n                <img\n                  alt={badge.name}\n                  src={badge.src}\n                  className=\"badgeImage\"\n                  onClick={() => awardBadge(badge._id)}\n                  onContextMenu={(e) => editOrDeleteBadge(e, badge._id)} />\n                <span className=\"badgeName\">{badge.name}</span>\n                <span>\n                    <img alt=\"coin icon\" className=\"coin\" src=\"assets/Coin_ico.png\" />\n                    <span className=\"badgeValue\">{badge.value}</span>\n                </span>\n            </div>\n        ));\n    }\n    return (\n        <div className=\"BadgeList\">\n            {generateBadgeList()}\n        </div>\n    )\n}\n\nfunction AwardBadge(props) {\n    const { students, badge } = props;\n    const [recipient, setRecipient] = useState(null); // student id\n    const [error, setError] = useState(false);\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const makeSureNameFits = (string) => {\n        if (string.length < 18) return string;\n        let shortenedString = string.substring(0, 17);\n        return shortenedString + '...';\n    }\n    const studentList = students.map(student => ({\n        value: student._id,\n        display: makeSureNameFits(student.firstName + ' ' + student.lastName)\n    }));\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        if (!recipient) return setError('Please select a student!');\n        setLoadingIcon(true);\n        const response = await fetch(`/student/${recipient}/badges`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ badgeId: badge._id })\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) {\n            setLoadingIcon(false);\n            return setError(body.error);\n        }\n        props.updateModal(false);\n        props.refreshData();\n    }\n    const updateRecipient = (_id) => {\n        setError(false);\n        setRecipient(_id);\n    }\n    return (\n        <div className=\"modalBox\">\n            <h2>Award this badge</h2>\n            <p>Choose a student to award this badge to:</p>\n            <div style={{ textAlign: 'center' }}>\n                <Dropdown\n                    style={{ minWidth: '15rem', marginBottom: '0.2rem' }}\n                    defaultValue={{ value: null, display: 'Select one...' }}\n                    listItems={studentList}\n                    onChange={updateRecipient}/>\n                {error && <span className=\"error\">{error}</span>}\n            </div>\n            <form onSubmit={handleSubmit} className=\"buttons\">\n                {loadingIcon\n                    ? <Loading />\n                    : <input type=\"submit\" />\n                }\n            </form>\n        </div>\n    )\n}\n\nfunction AddOrEditBadge(props) {\n    const { teacher, badge } = props;\n    const [loadingIcon, setLoadingIcon] = useState(false);\n    const [formData, setFormData] = useState({\n        _id: badge ? badge._id : '',\n        teacherCode: badge ? badge.teacherCode : teacher._id,\n        name: badge ? badge.name : '',\n        src: badge ? badge.src : '',\n        value: badge ? badge.value : ''\n    });\n    const updateFormData = (key, value) => {\n        setFormData(prevState => ({\n            ...prevState,\n            [key]: value\n        }));\n    }\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoadingIcon(true);\n        const ROUTE = badge ? `/badge/${badge._id}` : '/badge';\n        const response = await fetch(ROUTE, {\n            method: badge ? 'PUT' : 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(formData)\n        });\n        const body = await response.json();\n        if (!body) return console.log('no response from server');\n        if (!body.success) return console.log('no success response from server');\n        props.updateModal(false);\n        props.refreshData();\n    }\n    return (\n        <div className=\"modalBox\">\n            <form className=\"pad\" onSubmit={handleSubmit}>\n                <h2>{badge ? 'Edit this' : 'Add new'} badge</h2>\n                <label htmlFor=\"name\">Badge name:</label>\n                <input type=\"text\" defaultValue={badge ? badge.name : ''} onChange={(e) => updateFormData('name', e.target.value)} />\n                <label htmlFor=\"src\">Image link:</label>\n                <input type=\"text\" defaultValue={badge ? badge.src : ''} onChange={(e) => updateFormData('src', e.target.value)} />\n                <label htmlFor=\"value\">Badge value:</label>\n                <input type=\"text\" defaultValue={badge ? badge.value : ''} onChange={(e) => updateFormData('value', e.target.value)} />\n                <div className=\"buttons\">\n                    {loadingIcon\n                        ? <Loading />\n                        : <input type=\"submit\" />\n                    }\n                </div>\n            </form>\n        </div>\n    )\n}\n\nfunction Settings(props) {\n    return (\n        <div className=\"Main\">\n            <h1>Settings</h1>\n        </div>\n    );\n}","/Users/ngw/Documents/Sites/Pianopet/client/src/components/Marketplace.js",["107","108","109"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ViewStudent.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/ContextMenu.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Dropdown.js",["110"],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Avatar.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Closet.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Button.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/MyAccount.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/PianopetBase.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/utils/ntc.js",[],"/Users/ngw/Documents/Sites/Pianopet/client/src/components/Splat.js",[],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"111","replacedBy":"115"},{"ruleId":"113","replacedBy":"116"},{"ruleId":"111","replacedBy":"117"},{"ruleId":"113","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":41,"column":8,"nodeType":"121","endLine":41,"endColumn":21,"suggestions":"122"},{"ruleId":"119","severity":1,"message":"123","line":167,"column":8,"nodeType":"121","endLine":167,"endColumn":17,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":22,"column":41,"nodeType":"127","messageId":"128","endLine":22,"endColumn":43},{"ruleId":"125","severity":1,"message":"126","line":22,"column":52,"nodeType":"127","messageId":"128","endLine":22,"endColumn":54},{"ruleId":"119","severity":1,"message":"129","line":40,"column":8,"nodeType":"121","endLine":40,"endColumn":19,"suggestions":"130"},{"ruleId":"119","severity":1,"message":"131","line":96,"column":8,"nodeType":"121","endLine":96,"endColumn":19,"suggestions":"132"},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],["133"],["134"],["133"],["134"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTeacherData'. Either include it or remove the dependency array.","ArrayExpression",["135"],"React Hook useEffect has missing dependencies: 'addNewWearable' and 'wearableModal'. Either include them or remove the dependency array.",["136"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","React Hook useEffect has missing dependencies: 'getCategoryObject', 'preview', and 'viewingAsTeacher'. Either include them or remove the dependency array.",["137"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["138"],"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [getTeacherData, teacher._id]",{"range":"147","text":"148"},"Update the dependencies array to be: [addNewWearable, teacher, wearableModal]",{"range":"149","text":"150"},"Update the dependencies array to be: [getCategoryObject, preview, viewingAsTeacher, wearables]",{"range":"151","text":"152"},"Update the dependencies array to be: [addingNew, props]",{"range":"153","text":"154"},[1691,1704],"[getTeacherData, teacher._id]",[6425,6434],"[addNewWearable, teacher, wearableModal]",[2016,2027],"[getCategoryObject, preview, viewingAsTeacher, wearables]",[4057,4068],"[addingNew, props]"]